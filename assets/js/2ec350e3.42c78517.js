"use strict";(self.webpackChunklearn_haskell_blog_generator=self.webpackChunklearn_haskell_blog_generator||[]).push([[839],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var l=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},o=Object.keys(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=l.createContext({}),c=function(e){var n=l.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return l.createElement(p.Provider,{value:n},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},m=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,f=u["".concat(p,".").concat(m)]||u[m]||h[m]||o;return t?l.createElement(f,i(i({ref:n},s),{},{components:t})):l.createElement(f,i({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a[u]="string"==typeof e?e:r,i[1]=a;for(var c=2;c<o;c++)i[c]=t[c];return l.createElement.apply(null,i)}return l.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8448:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var l=t(7462),r=(t(7294),t(3905));const o={},i="\uc0ac\uc6a9\uc790 \uc815\uc758 \ub9c8\ud06c\uc5c5 \uc5b8\uc5b4",a={unversionedId:"markup/index",id:"markup/index",title:"\uc0ac\uc6a9\uc790 \uc815\uc758 \ub9c8\ud06c\uc5c5 \uc5b8\uc5b4",description:"\uc774\ubc88 \uc7a5\uc5d0\uc11c\ub294 \uac04\ub2e8\ud55c \ub9c8\ud06c\uc5c5 \uc5b8\uc5b4\ub97c \uc815\uc758\ud558\uace0, \uc774 \uc5b8\uc5b4\ub85c \uc791\uc131\ub41c \ubb38\uc11c\ub97c \ud558\uc2a4\ucf08 \ub370\uc774\ud130 \uad6c\uc870\ub85c \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.",source:"@site/docs/04-markup/index.md",sourceDirName:"04-markup",slug:"/markup/",permalink:"/learn-haskell-blog-generator/markup/",draft:!1,editUrl:"https://github.com/jbl428/learn-haskell-blog-generator/tree/book/docs/04-markup/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\uc694\uc57d",permalink:"/learn-haskell-blog-generator/html/summary"},next:{title:"\ud558\uc2a4\ucf08 \ub370\uc774\ud130 \ud0c0\uc785\uc73c\ub85c \ub9c8\ud06c\uc5c5 \uc5b8\uc5b4 \ud45c\ud604\ud558\uae30",permalink:"/learn-haskell-blog-generator/markup/data-type"}},p={},c=[],s={toc:c},u="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,l.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\uc0ac\uc6a9\uc790-\uc815\uc758-\ub9c8\ud06c\uc5c5-\uc5b8\uc5b4"},"\uc0ac\uc6a9\uc790 \uc815\uc758 \ub9c8\ud06c\uc5c5 \uc5b8\uc5b4"),(0,r.kt)("p",null,"\uc774\ubc88 \uc7a5\uc5d0\uc11c\ub294 \uac04\ub2e8\ud55c \ub9c8\ud06c\uc5c5 \uc5b8\uc5b4\ub97c \uc815\uc758\ud558\uace0, \uc774 \uc5b8\uc5b4\ub85c \uc791\uc131\ub41c \ubb38\uc11c\ub97c \ud558\uc2a4\ucf08 \ub370\uc774\ud130 \uad6c\uc870\ub85c \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."),(0,r.kt)("p",null,"\uc774\ubc88\uc5d0 \ub9cc\ub4e4 \ub9c8\ud06c\uc5c5 \uc5b8\uc5b4\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uae30\ub2a5\uc744 \uac00\uc9c8 \uac83\uc785\ub2c8\ub2e4:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\uc81c\ubaa9: ",(0,r.kt)("inlineCode",{parentName:"li"},"*")," \ubb38\uc790\ub97c \uc55e\uc5d0 \ubd99\uc785\ub2c8\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ub2e8\ub77d: \ube48 \uc904\uc774 \uc5c6\ub294 \uadf8\ub8f9\uc758 \ub77c\uc778\ub4e4"),(0,r.kt)("li",{parentName:"ul"},"\uc21c\uc11c \uc5c6\ub294 \ubaa9\ub85d: \uac01 \uc904\uc774 ",(0,r.kt)("inlineCode",{parentName:"li"},"- "),"\ub85c \uc2dc\uc791\ud569\ub2c8\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\uc21c\uc11c \uc788\ub294 \ubaa9\ub85d: \uac01 \uc904\uc774 ",(0,r.kt)("inlineCode",{parentName:"li"},"# "),"\ub85c \uc2dc\uc791\ud569\ub2c8\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ucf54\ub4dc \ube14\ub85d: \uac01 \uc904\uc774 ",(0,r.kt)("inlineCode",{parentName:"li"},"> "),"\ub85c \uc2dc\uc791\ud569\ub2c8\ub2e4.")),(0,r.kt)("p",null,"\ub2e4\uc74c \uc608\uc81c \ubb38\uc11c\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-org"},'* Compiling programs with ghc\n\nRunning ghc invokes the Glasgow Haskell Compiler (GHC),\nand can be used to compile Haskell modules and programs into native\nexecutables and libraries.\n\nCreate a new Haskell source file named hello.hs, and write\nthe following code in it:\n\n> main = putStrLn "Hello, Haskell!"\n\nNow, we can compile the program by invoking ghc with the file name:\n\n> \u279c ghc hello.hs\n> [1 of 1] Compiling Main             ( hello.hs, hello.o )\n> Linking hello ...\n\nGHC created the following files:\n\n- hello.hi - Haskell interface file\n- hello.o - Object file, the output of the compiler before linking\n- hello (or hello.exe on Microsoft Windows) - A native runnable executable.\n\nGHC will produce an executable when the source file satisfies both conditions:\n\n# Defines the main function in the source file\n# Defines the module name to be Main, or does not have a module declaration\n\nOtherwise, it will only produce the .o and .hi files.\n')),(0,r.kt)("p",null,"\uc774 \ubb38\uc11c\ub294 \ub2e4\uc74c HTML\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<h1>Compiling programs with ghc</h1>\n\n<p>\n  Running ghc invokes the Glasgow Haskell Compiler (GHC), and can be used to\n  compile Haskell modules and programs into native executables and libraries.\n</p>\n\n<p>\n  Create a new Haskell source file named hello.hs, and write the following code\n  in it:\n</p>\n\n<pre>\nmain = putStrLn "Hello, Haskell!"\n</pre>\n\n<p>Now, we can compile the program by invoking ghc with the file name:</p>\n\n<pre>\n\u279c ghc hello.hs\n[1 of 1] Compiling Main             ( hello.hs, hello.o )\nLinking hello ...\n</pre>\n\n<p>GHC created the following files:</p>\n\n<ul>\n  <li>hello.hi - Haskell interface file</li>\n  <li>hello.o - Object file, the output of the compiler before linking</li>\n  <li>\n    hello (or hello.exe on Microsoft Windows) - A native runnable executable.\n  </li>\n</ul>\n\n<p>\n  GHC will produce an executable when the source file satisfies both conditions:\n</p>\n\n<ol>\n  <li>Defines the main function in the source file</li>\n  <li>\n    Defines the module name to be Main, or does not have a module declaration\n  </li>\n</ol>\n\n<p>Otherwise, it will only produce the .o and .hi files.</p>\n')))}h.isMDXComponent=!0}}]);