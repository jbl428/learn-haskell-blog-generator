"use strict";(self.webpackChunklearn_haskell_blog_generator=self.webpackChunklearn_haskell_blog_generator||[]).push([[554],{3905:(e,n,t)=>{t.d(n,{Zo:()=>k,kt:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},k=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,k=o(e,["components","mdxType","originalType","parentName"]),u=p(t),c=r,d=u["".concat(s,".").concat(c)]||u[c]||m[c]||l;return t?a.createElement(d,i(i({ref:n},k),{},{components:t})):a.createElement(d,i({ref:n},k))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9343:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const l={},i="\ub9c8\ud06c\uc5c5 \ud30c\uc2f1\ud558\uae30 02 (\ud328\ud134 \ub9e4\uce6d)",o={unversionedId:"markup/parsing-02",id:"markup/parsing-02",title:"\ub9c8\ud06c\uc5c5 \ud30c\uc2f1\ud558\uae30 02 (\ud328\ud134 \ub9e4\uce6d)",description:"Maybe",source:"@site/docs/04-markup/04-parsing-02.md",sourceDirName:"04-markup",slug:"/markup/parsing-02",permalink:"/learn-haskell-blog-generator/markup/parsing-02",draft:!1,editUrl:"https://github.com/jbl428/learn-haskell-blog-generator/tree/book/docs/04-markup/04-parsing-02.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud30c\uc2f1 \uacb0\uacfc \ubcf4\uc5ec\uc8fc\uae30 (\ud0c0\uc785 \ud074\ub798\uc2a4)",permalink:"/learn-haskell-blog-generator/markup/displaying-results"},next:{title:"\ud1b5\ud569\ud558\uae30",permalink:"/learn-haskell-blog-generator/glue/"}},s={},p=[{value:"Maybe",id:"maybe",level:2},{value:"\ud328\ud134 \ub9e4\uce6d",id:"\ud328\ud134-\ub9e4\uce6d",level:2},{value:"\uc5f0\uacb0 \ub9ac\uc2a4\ud2b8 \ud328\ud134 \ub9e4\uce6d",id:"\uc5f0\uacb0-\ub9ac\uc2a4\ud2b8-\ud328\ud134-\ub9e4\uce6d",level:3},{value:"\ud48d\ubd80\ud55c \ubb38\ub9e5\uc744 \ud1b5\ud574 \ud30c\uc2f1\ud558\uae30",id:"\ud48d\ubd80\ud55c-\ubb38\ub9e5\uc744-\ud1b5\ud574-\ud30c\uc2f1\ud558\uae30",level:2},{value:"\uc6b0\ub9ac\uc758 \ud30c\uc11c\uac00 \uc81c\ub300\ub85c \ub3d9\uc791\ud558\ub294\uc9c0 \uc5b4\ub5bb\uac8c \uc54c \uc218 \uc788\uc744\uae4c\uc694?",id:"\uc6b0\ub9ac\uc758-\ud30c\uc11c\uac00-\uc81c\ub300\ub85c-\ub3d9\uc791\ud558\ub294\uc9c0-\uc5b4\ub5bb\uac8c-\uc54c-\uc218-\uc788\uc744\uae4c\uc694",level:3}],k={toc:p},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\ub9c8\ud06c\uc5c5-\ud30c\uc2f1\ud558\uae30-02-\ud328\ud134-\ub9e4\uce6d"},"\ub9c8\ud06c\uc5c5 \ud30c\uc2f1\ud558\uae30 02 (\ud328\ud134 \ub9e4\uce6d)"),(0,r.kt)("h2",{id:"maybe"},"Maybe"),(0,r.kt)("p",null,"\uc774\uc804\uc5d0 \ubd80\ubd84 \ud568\uc218\ub97c \ub9cc\ub4e4\uc9c0 \uc54a\ub294 \ubc29\ubc95 \uc911 \ud558\ub098\ub85c, ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe"),"\ub97c \uc0ac\uc6a9\ud558\uc5ec \uacb0\uacfc\uac00 \uc5c6\ub294 \uacbd\uc6b0\ub97c \ud45c\ud604\ud558\ub294 \uac83\uc744 \uc0b4\ud3b4 \ubcf4\uc558\uc2b5\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"data Maybe a\n  = Nothing\n  | Just a\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Maybe"),"\ub294 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac(",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base"},"base"),")\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \ub370\uc774\ud130 \ud0c0\uc785\uc73c\ub85c,\n\uac12\uc758 \ubd80\uc7ac\ub97c \uc758\ubbf8\ud558\ub294 \ucd94\uac00\uc801\uc778 \uac12\uc744 \ud0c0\uc785\uc5d0 \ucd94\uac00\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n\uc608\ub97c \ub4e4\uc5b4, ",(0,r.kt)("inlineCode",{parentName:"p"},"Just")," \uc0dd\uc131\uc790\ub294 \uc77c\ubc18\uc801\uc778 \ubd88\ub9ac\uc5b8 \uac12\uc774 \uc788\uc74c\uc744 \ub098\ud0c0\ub0b4\uace0, (",(0,r.kt)("inlineCode",{parentName:"p"},"Just True"),"\uc640 ",(0,r.kt)("inlineCode",{parentName:"p"},"Just False"),")\n",(0,r.kt)("inlineCode",{parentName:"p"},"Nothing")," \uc0dd\uc131\uc790\ub294 \ubd88\ub9ac\uc5b8 \uac12\uc774 \uc5c6\uc74c\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4."),(0,r.kt)("p",null,"\uc774\ub97c \ud1b5\ud574 \uc8fc\uc5b4\uc9c4 \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubc88\uc9f8 \uc694\uc18c\ub97c \ubc18\ud658\ud558\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"head")," \ud568\uc218\ub97c \ubd80\ubd84 \ud568\uc218\ub85c \ub9cc\ub4e4\uc9c0 \uc54a\uace0 \ud56d\uc0c1 \uac12\uc744 \ubc18\ud658\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"safeHead :: [a] -> Maybe a\n")),(0,r.kt)("p",null,"\uc704 \ubc29\uc2dd\uc740 \ub9ac\uc2a4\ud2b8\uac00 \ube44\uc5b4\uc788\ub2e4\uba74, ",(0,r.kt)("inlineCode",{parentName:"p"},"Nothing"),"\uc744 \ubc18\ud658\ud558\uace0, \ube44\uc5b4\uc788\uc9c0 \uc54a\ub2e4\uba74 ",(0,r.kt)("inlineCode",{parentName:"p"},"Just <\uccab \ubc88\uc9f8 \uc694\uc18c>"),"\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Data-Maybe.html"},"Data.Maybe")," \ubaa8\ub4c8\uc758\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Data-Maybe.html#v:listToMaybe"},"listToMaybe")," \ud568\uc218\uac00 \uc774 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Maybe <\ubb34\uc5b8\uac00>")," \ub610\ub294 \ub2e4\ub978 ",(0,r.kt)("inlineCode",{parentName:"p"},"data"),"\ub85c \uc0dd\uc131\ub41c \ud0c0\uc785\uc758 \uac12\uc744 ",(0,r.kt)("em",{parentName:"p"},"\uaebc\ub0b4\uae30"),"\uc704\ud574, \ud328\ud134 \ub9e4\uce6d\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("h2",{id:"\ud328\ud134-\ub9e4\uce6d"},"\ud328\ud134 \ub9e4\uce6d"),(0,r.kt)("p",null,"\uc774\uc804\uc5d0 \ud328\ud134 \ub9e4\uce6d\uc5d0 \ub300\ud574 \uc774\ubbf8 \uba87 \ubc88 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n\ud328\ud134 \ub9e4\uce6d\uc740 \ud558\uc2a4\ucf08\uc758 \ub9e4\uc6b0 \uc720\uc6a9\ud55c \uae30\ub2a5\uc73c\ub85c, \uc8fc\ub85c \ub450 \uac00\uc9c0 \uc8fc\uc694 \ubaa9\uc801\uc73c\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\ubcf5\uc7a1\ud55c \uac12\uc744 \ubd84\ud574"),(0,r.kt)("li",{parentName:"ol"},"\ud750\ub984 \uc81c\uc5b4")),(0,r.kt)("p",null,"\uc774\uc804 ",(0,r.kt)("a",{parentName:"p",href:"/learn-haskell-blog-generator/html/safer-construction#using-newtypes"},"newtype"),"\uc744 \uc18c\uac1c\ud560 \ub54c,\n",(0,r.kt)("strong",{parentName:"p"},"case \ud45c\ud604\uc2dd"),"\uacfc ",(0,r.kt)("strong",{parentName:"p"},"\ud568\uc218 \uc815\uc758"),"\ub97c \uc0ac\uc6a9\ud558\uc5ec ",(0,r.kt)("inlineCode",{parentName:"p"},"newtype"),"\uc744 \ubd84\ud574\ud558\ub294 \ubc29\ubc95\uc744 \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n",(0,r.kt)("inlineCode",{parentName:"p"},"data")," \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c\ub3c4 \uac19\uc740 \ubc29\ubc95\uc744 \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"-- | \uc0c9\uc0c1\uc744 \ud45c\ud604\ud558\ub294 \ub370\uc774\ud130 \ud0c0\uc785\ndata Color\n  = RGB Word8 Word8 Word8\n\ngetBluePart :: Color -> Word8\ngetBluePart color =\n  case color of\n    RGB _ _ blue -> blue\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getBluePart")," \ud568\uc218\ub294 \uc8fc\uc5b4\uc9c4 \ud569\uc131 \uac12\uc744 \ubd84\ud574\ud558\uc5ec RGB\uc5d0\uc11c \uc138 \ubc88\uc9f8 \uc694\uc18c\uc778 \ud30c\ub780\uc0c9 \uac12\uc744 \ucd94\ucd9c\ud569\ub2c8\ub2e4."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"blue"),"\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"color"),"\uc758 \uc138 \ubc88\uc9f8 \uc694\uc18c\uc5d0 \uc900 \uc774\ub984\uc73c\ub85c \uc624\ub978\ucabd \ud654\uc0b4\ud45c \ub2e4\uc74c\uc5d0 \uc624\ub294 \ud328\ud134\uc5d0 \ubc14\uc778\ub529\ub429\ub2c8\ub2e4.\n\uc774\ub294 \ud568\uc218 \uc778\uc218\uc640 \uc720\uc0ac\ud569\ub2c8\ub2e4.\n\ub610\ud55c ",(0,r.kt)("inlineCode",{parentName:"p"},"_"),"\ub294 \uc774\ub984\uc744 \ubc14\uc778\ub529\ud558\uc9c0 \uc54a\uace0 \ubaa8\ub4e0 \uac12\uacfc \uc77c\uce58\ud558\ub294 \ud328\ud134\uc785\ub2c8\ub2e4."),(0,r.kt)("p",null,"\uac12\uc744 \ub450 \uac1c \uc774\uc0c1\uc758 \ud328\ud134\uacfc \ube44\uad50\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"data Brightness\n  = Dark\n  | Bright\n\ndata EightColor\n  = Black\n  | Red\n  | Green\n  | Yellow\n  | Blue\n  | Magenta\n  | Cyan\n  | White\n\ndata AnsiColor\n  = AnsiColor Brightness EightColor\n\nansiColorToVGA :: AnsiColor -> Color\nansiColorToVGA ansicolor =\n  case ansicolor of\n    AnsiColor Dark Black ->\n      RGB 0 0 0\n    AnsiColor Bright Black ->\n      RGB 85 85 85\n    AnsiColor Dark Red ->\n      RGB 170 0 0\n    AnsiColor Bright Red ->\n      RGB 255 85 85\n    -- and so on\n")),(0,r.kt)("p",null,"\ub2e4\uc74c \ud56d\ubaa9\uc744 \uc8fc\ubaa9\ud558\uc138\uc694:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\ud328\ud134\uc740 \uc911\ucca9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ",(0,r.kt)("inlineCode",{parentName:"li"},"ansicolor"),"\ub97c \uc5ec\ub7ec \ub2e8\uacc4\ub85c \ubd84\ud574\ud558\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("li",{parentName:"ol"},"\ud328\ud134\uc740 \uc704\uc5d0\uc11c \uc544\ub798\ub85c \ub9e4\uce6d\ub418\ubbc0\ub85c, \ud328\ud134\uc774 \uc911\ucca9\ub418\uba74 \uc704\uc5d0 \uc788\ub294 \ud328\ud134\uc774 \uc6b0\uc120\ud569\ub2c8\ub2e4."),(0,r.kt)("li",{parentName:"ol"},"\uc5b4\ub5a4 \uac12\uc774 \uc8fc\uc5b4\uc9c4 \ubaa8\ub4e0 \ud328\ud134\uacfc \uc77c\uce58\ud558\uc9c0 \uc54a\uc73c\uba74 \ub7f0\ud0c0\uc784\uc5d0 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.")),(0,r.kt)("p",null,"GHC\uc5d0\uac8c \uc6b0\ub9ac\uac00 \uc2e4\uc218\ub85c \ud328\ud134\uc744 \uc911\ubcf5\ud574\uc11c \uc791\uc131\ud588\uac70\ub098, \ubaa8\ub4e0 \uac00\ub2a5\ud55c \uac12\uc744 \ub9e4\uce6d\ud560 \uc218 \uc788\ub3c4\ub85d \uc791\uc131\ud558\uc9c0 \uc54a\uc558\ub2e4\ub294 \uac83\uc744 \uc54c\ub824\uc8fc\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n",(0,r.kt)("inlineCode",{parentName:"p"},"ghc")," \ub610\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"runghc"),"\uc5d0 ",(0,r.kt)("inlineCode",{parentName:"p"},"-Wall")," \ud50c\ub798\uadf8\ub97c \uc804\ub2ec\ud558\uba74 \ub429\ub2c8\ub2e4."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\ud56d\uc0c1 ",(0,r.kt)("inlineCode",{parentName:"strong"},"-Wall"),"\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4"),"!"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"\ud568\uc218\ub97c \uc5ec\ub7ec\ubc88 \uc815\uc758\ud558\ub294 \ubc29\uc2dd\uc744 \ud1b5\ud574, \ud328\ud134 \ub9e4\uce6d\uc744 \ud568\uc218 \uc815\uc758\uc5d0\ub3c4 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\n\ud558\uc9c0\ub9cc ",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/_gilmi/status/1257225601079029760"},"\uac1c\uc778\uc801\uc73c\ub85c \uadf8 \uae30\ub2a5\uc744 \uc369 \uc88b\uc544\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4"),"\n\uac00\ub2a5\ud558\uba74 case \ud45c\ud604\uc2dd\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4.\n\ud558\uc9c0\ub9cc \uc6d0\ud55c\ub2e4\uba74 case \ud45c\ud604\uc2dd \ub300\uc2e0 \uc0ac\uc6a9\ud574\ub3c4 \uc88b\uc2b5\ub2c8\ub2e4.")),(0,r.kt)("h3",{id:"\uc5f0\uacb0-\ub9ac\uc2a4\ud2b8-\ud328\ud134-\ub9e4\uce6d"},"\uc5f0\uacb0 \ub9ac\uc2a4\ud2b8 \ud328\ud134 \ub9e4\uce6d"),(0,r.kt)("p",null,"\uc5f0\uacb0 \ub9ac\uc2a4\ud2b8\uc5d0\ub294 ",(0,r.kt)("a",{parentName:"p",href:"/learn-haskell-blog-generator/html/escaping-characters#linked-lists-briefly"},"\ud2b9\ubcc4\ud55c \ubb38\ubc95"),"\uc774 \uc788\ub294\ub370, \ud328\ud134 \ub9e4\uce6d\uc5d0\ub3c4 \ud2b9\ubcc4\ud55c \ubb38\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n\ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4e4 \ub54c \uc0ac\uc6a9\ud55c \ud2b9\ubcc4\ud55c \ubb38\ubc95\uc744 \ud1b5\ud574, \ub9ac\uc2a4\ud2b8\uc758 ",(0,r.kt)("em",{parentName:"p"},"\uc694\uc18c"),"\ub97c \ud328\ud134\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc608\ub97c \ub4e4\uc5b4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"safeHead :: [a] -> Maybe a\nsafeHead list =\n  case list of\n    -- \ube48 \ub9ac\uc2a4\ud2b8\n    [] -> Nothing\n\n    -- cons \uc140 \ud328\ud134, \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubc88\uc9f8 \uc694\uc18c\ub97c x\uc5d0 \ub9e4\uce6d\n    x : _ -> Just x\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"exactlyTwo :: [a] -> Maybe (a, a)\nexactlyTwo list =\n  case list of\n    -- \uc815\ud655\ud788 \ub450 \uac1c\uc758 \uc694\uc18c\ub97c \uac00\uc9c4 \ub9ac\uc2a4\ud2b8\uc640 \ub9e4\uce6d\n    [x, y] -> Just (x, y)\n\n    -- \ub098\uba38\uc9c0 \ubaa8\ub4e0 \ud328\ud134\uacfc \ub9e4\uce6d\n    _ -> Nothing\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"-- \ub2e4\uc74c \ud568\uc218\ub3c4 \uac19\uc740 \uacb0\uacfc\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4\nexactlyTwoVersion2 :: [a] -> Maybe (a, a)\nexactlyTwoVersion2 list =\n  case list of\n    -- \uc815\ud655\ud788 \ub450 \uac1c\uc758 \uc694\uc18c\ub97c \uac00\uc9c4 \ub9ac\uc2a4\ud2b8\uc640 \ub9e4\uce6d\n    x : y : [] -> Just (x, y)\n\n    -- \ub098\uba38\uc9c0 \ubaa8\ub4e0 \ud328\ud134\uacfc \ub9e4\uce6d\n    _ -> Nothing\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"\uc5f0\uc2b5\ubb38\uc81c:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\uc8fc\uc5b4\uc9c4 \uc0c9\uc774 \ubc1d\uc740 \uc0c9\uc778\uc9c0\ub97c \ud655\uc778\ud558\ub294 ",(0,r.kt)("inlineCode",{parentName:"li"},"isBright :: AnsiColor -> Bool")," \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit"},"\uc774 \ud45c"),"\ub97c \uc0ac\uc6a9\ud558\uc5ec ",(0,r.kt)("inlineCode",{parentName:"li"},"ansiToUbuntu")," \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"listToMaybe"),"\ub97c \uc0ac\uc6a9\ud574 \ub9ac\uc2a4\ud2b8\uac00 \ube44\uc5b4\uc788\ub294\uc9c0 \ud655\uc778\ud558\ub294 ",(0,r.kt)("inlineCode",{parentName:"li"},"isEmpty :: [a] -> Bool")," \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"listToMaybe"),"\ub97c ",(0,r.kt)("em",{parentName:"li"},"\uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0")," \ub9ac\uc2a4\ud2b8\uac00 \ube44\uc5b4\uc788\ub294\uc9c0 \ud655\uc778\ud558\ub294 ",(0,r.kt)("inlineCode",{parentName:"li"},"isEmpty :: [a] -> Bool")," \ud568\uc218\ub97c \uc791\uc131\ud558\uc138\uc694.")),(0,r.kt)("p",null,"\uc815\ub2f5:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\uc5f0\uc2b5\ubb38\uc81c (1)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"isBright :: AnsiColor -> Bool\nisBright ansiColor =\n  case ansiColor of\n    AnsiColor Bright _ -> True\n    AnsiColor Dark _ -> False\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\uc5f0\uc2b5\ubb38\uc81c (2)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"ansiToUbuntu :: AnsiColor -> Color\nansiToUbuntu ansiColor =\n  case ansiColor of\n    AnsiColor brightness color ->\n      case brightness of\n        Dark ->\n          case color of\n            Black -> RGB 0 0 0\n            Red -> RGB 194 54 33\n            Green -> RGB 37 188 36\n            Yellow -> RGB 173 173 39\n            Blue -> RGB 73 46 225\n            Magenta -> RGB 211 56 211\n            Cyan -> RGB 51 187 200\n            White -> RGB 203 204 205\n\n        Bright ->\n          case color of\n            Black -> RGB 129 131 131\n            Red -> RGB 252 57 31\n            Green -> RGB 49 231 34\n            Yellow -> RGB 234 236 35\n            Blue -> RGB 88 51 255\n            Magenta -> RGB 249 53 248\n            Cyan -> RGB 20 240 240\n            White -> RGB 233 235 235\n")),(0,r.kt)("p",null,"\uc704 \ucf54\ub4dc\ucc98\ub7fc \ud328\ud134 \ub9e4\uce6d\uc740 \ud55c \uc5c6\uc774 \uae4a\uc5b4\uc9c8 \uc218 \uc788\uae30\uc5d0, \ud558\ub098\uc758 ",(0,r.kt)("inlineCode",{parentName:"p"},"case")," \ud45c\ud604\uc2dd\uc744 \uc0ac\uc6a9\ud574 \ubaa8\ub4e0 \uacbd\uc6b0\ub97c \ub9e4\uce6d\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"ansiToUbuntu :: AnsiColor -> Color\nansiToUbuntu ansiColor =\n  case ansiColor of\n    AnsiColor Dark Black -> RGB 0 0 0\n    AnsiColor Dark Red -> RGB 194 54 33\n    AnsiColor Dark Green -> RGB 37 188 36\n    AnsiColor Dark Yellow -> RGB 173 173 39\n    AnsiColor Dark Blue -> RGB 73 46 225\n    AnsiColor Dark Magenta -> RGB 211 56 211\n    AnsiColor Dark Cyan -> RGB 51 187 200\n    AnsiColor Dark White -> RGB 203 204 205\n    AnsiColor Bright Black -> RGB 129 131 131\n    AnsiColor Bright Red -> RGB 252 57 31\n    AnsiColor Bright Green -> RGB 49 231 34\n    AnsiColor Bright Yellow -> RGB 234 236 35\n    AnsiColor Bright Blue -> RGB 88 51 255\n    AnsiColor Bright Magenta -> RGB 249 53 248\n    AnsiColor Bright Cyan -> RGB 20 240 240\n    AnsiColor Bright White -> RGB 233 235 235\n")),(0,r.kt)("p",null,"\ud558\uc9c0\ub9cc \uc774 \ubc29\uc2dd\uc740 ",(0,r.kt)("inlineCode",{parentName:"p"},"AnsiColor"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Dark")," \uadf8\ub9ac\uace0 ",(0,r.kt)("inlineCode",{parentName:"p"},"Bright"),"\uac00 \ub9ce\uc774 \ubc18\ubcf5\ub418\ub294 \ub2e8\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\uc5f0\uc2b5\ubb38\uc81c (3)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"isEmpty :: [a] -> Bool\nisEmpty list =\n  case listToMaybe list of\n    Nothing -> True\n    Just _ -> False\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\uc5f0\uc2b5\ubb38\uc81c (4)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"isEmpty :: [a] -> Bool\nisEmpty list =\n  case list of\n    [] -> True\n    _ : _ -> False\n"))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"\ud48d\ubd80\ud55c-\ubb38\ub9e5\uc744-\ud1b5\ud574-\ud30c\uc2f1\ud558\uae30"},"\ud48d\ubd80\ud55c \ubb38\ub9e5\uc744 \ud1b5\ud574 \ud30c\uc2f1\ud558\uae30"),(0,r.kt)("p",null,"\uc774\uc804\uc5d0\ub294 \ubb38\uc11c\ub97c \uc5ec\ub7ec \ubb38\ub2e8\uc73c\ub85c \ubd84\ub9ac\ud558\ub294 \ud30c\uc11c\ub97c \uc791\uc131\ud588\uc2b5\ub2c8\ub2e4.\n\uc0c8\ub85c\uc6b4 \uae30\ub2a5\uc744 \ucd94\uac00\ud558\uc5ec \uc774\uc81c\ub294 \uc6b0\ub9ac\uac00 \uc5b4\ub5a4 \ubb38\ub9e5(context)\uc5d0 \uc788\ub294\uc9c0(\ud14d\uc2a4\ud2b8 \ub2e8\ub77d, \ubaa9\ub85d, \ub610\ub294 \ucf54\ub4dc \ube14\ub85d) \uc815\ud655\ud788 \uae30\uc5b5\ud558\uace0 \uadf8\uc5d0 \ub530\ub77c \uc791\ub3d9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4!"),(0,r.kt)("p",null,"\uc774\uc804\uc5d0 \uc791\uc131\ud55c \ud30c\uc2f1 \ucf54\ub4dc\ub97c \ub2e4\uc2dc \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},'parse :: String -> Document\nparse = parseLines [] . lines\n\nparseLines :: [String] -> [String] -> Document\nparseLines currentParagraph txts =\n  let\n    paragraph = Paragraph (unlines (reverse currentParagraph))\n  in\n    case txts of\n      [] -> [paragraph]\n      currentLine : rest ->\n        if trim currentLine == ""\n          then\n            paragraph : parseLines [] rest\n          else\n            parseLines (currentLine : currentParagraph) rest\n\ntrim :: String -> String\ntrim = unwords . words\n')),(0,r.kt)("p",null,"\uc704 \ucf54\ub4dc\uc5d0\uc11c ",(0,r.kt)("inlineCode",{parentName:"p"},"currentParagraph"),"\uc774 \ubb38\ub9e5\uc744 \uc758\ubbf8\ud558\uba70, \uc778\uc811\ud55c \uc904\ub4e4\uc744 \uadf8\ub8f9\uc73c\ub85c \ubb36\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4."),(0,r.kt)("p",null,"\uc774\ubc88\uc5d0\ub294 \uc778\uc811\ud55c \uc904\uc744 ",(0,r.kt)("inlineCode",{parentName:"p"},"[String]"),"\uc774 \uc544\ub2cc \ubb38\ub9e5\uc744 \ub098\ud0c0\ub0b4\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"Structure")," \ud0c0\uc785\uc73c\ub85c \ud45c\ud604\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."),(0,r.kt)("p",null,"\ud558\uc9c0\ub9cc ",(0,r.kt)("inlineCode",{parentName:"p"},"Structure")," \ud0c0\uc785\uc73c\ub85c \ubb38\ub9e5\uc744 \ud45c\ud604\ud560 \ub54c\uc758 \ubb38\uc81c\uc810 \uc911 \ud558\ub098\ub294, \ud30c\uc2f1\uc744 \uc2dc\uc791\ud560 \ub54c\ub294 \uc5b4\ub5a4 \ubb38\ub9e5\ub3c4 \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.\n\uadf8\ub7ec\ub098 ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe"),"\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac12\uc774 \uc5c6\uc74c\uc744 \ub098\ud0c0\ub0b4\ub294 \ubc29\ubc95\uc744 \ubc30\uc6e0\uc2b5\ub2c8\ub2e4!\n\uadf8\ub798\uc11c \uc6b0\ub9ac\uc758 \uc0c8\ub85c\uc6b4 \ubb38\ub9e5 \uc720\ud615\uc740 ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe Structure")," \uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("p",null,"\uc704 \ucf54\ub4dc\ub97c \uc0c8\ub85c\uc6b4 \ubb38\ub9e5 \ud0c0\uc785\uc73c\ub85c \uc218\uc815\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},'parse :: String -> Document\nparse = parseLines Nothing . lines -- (1)\n\nparseLines :: Maybe Structure -> [String] -> Document\nparseLines context txts =\n  case txts of\n    [] -> maybeToList context -- (2)\n    -- \ubb38\ub2e8\uc778 \uacbd\uc6b0\n    currentLine : rest ->\n      let\n        line = trim currentLine\n      in\n        if line == ""\n          then\n            maybe id (:) context (parseLines Nothing rest) -- (3)\n          else\n            case context of\n              Just (Paragraph paragraph) ->\n                parseLines (Just (Paragraph (unwords [paragraph, line]))) rest -- (4)\n              _ ->\n                maybe id (:) context (parseLines (Just (Paragraph line)) rest)\n\ntrim :: String -> String\ntrim = unwords . words\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\uc544\uc9c1 \ubb38\ub9e5\uc774 \uc5c6\uc73c\ubbc0\ub85c ",(0,r.kt)("inlineCode",{parentName:"p"},"Nothing"),"\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"maybeToList"),"\uac00 \ubb34\uc5c7\uc778\uc9c0 \ubaa8\ub974\uaca0\ub2e4\uba74 ",(0,r.kt)("a",{parentName:"p",href:"https://hoogle.haskell.org"},"Hoogle"),"\uc744 \uc0ac\uc6a9\ud574\ubcf4\uc138\uc694!")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\uc774 \uc904\uc744 \ub450 \uac00\uc9c0 \uc911\uc694\ud55c \ubd80\ubd84\uc73c\ub85c \ub098\ub20c \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"maybe id (:) context")," - \ubb38\ub9e5\uc744 \ubb38\uc11c\uc758 \ub098\uba38\uc9c0 \ubd80\ubd84\uc5d0 \uc55e\uc5d0 \ubd99\uc785\ub2c8\ub2e4."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"parseLines Nothing rest")," - \ubb38\uc11c\uc758 \ub098\uba38\uc9c0 \ubd80\ubd84\uc744 \ud30c\uc2f1\ud569\ub2c8\ub2e4.")),(0,r.kt)("p",{parentName:"li"},"\uba3c\uc800 \uccab \ubc88\uc9f8 \ubd80\ubd84\uc744 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\uc6b0\ub9ac\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"context"),"\ub97c \ubb38\uc11c\uc758 \ub098\uba38\uc9c0 \uc694\uc18c \uc55e\uc5d0 \ubd99\uc774\uace0 \uc2f6\uc9c0\ub9cc, ",(0,r.kt)("inlineCode",{parentName:"p"},"context"),"\uac00 ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe Structure")," \ud0c0\uc785\uc744 \uac00\uc9c0\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 ",(0,r.kt)("inlineCode",{parentName:"p"},"context : parseLines Nothing rest"),"\uc640 \uac19\uc774 \uc791\uc131\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\n\ub610\ud55c ",(0,r.kt)("inlineCode",{parentName:"p"},"Structure")," \ud0c0\uc785\uc774 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 ",(0,r.kt)("inlineCode",{parentName:"p"},"context"),"\uac00 ",(0,r.kt)("inlineCode",{parentName:"p"},"Structure"),"\ub97c \uac00\uc9c0\uace0 \uc788\uc744 \uc218\ub3c4 \uc788\uace0, \uadf8\ub807\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\n\ub9cc\uc57d ",(0,r.kt)("inlineCode",{parentName:"p"},"Structure"),"\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74 \uadf8\uac83\uc744 \uc55e\uc5d0 \ubd99\uc5ec\uc57c \ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 ",(0,r.kt)("inlineCode",{parentName:"p"},"parseLines Nothing rest"),"\uc758 \uacb0\uacfc\ub97c \uadf8\ub300\ub85c \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.\n\uc774\ub97c \ud328\ud134 \ub9e4\uce6d\uc744 \uc0ac\uc6a9\ud574 \uc791\uc131\ud574\ubcf4\uc138\uc694!"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\uc815\ub2f5"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"case context of\n  Nothing -> parseLines Nothing rest\n  Just structure -> structure : parseLines Nothing rest\n"))),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Prelude.html#v:maybe"},"maybe")," \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 \uc704 \uc791\uc5c5\uc744 \ub354 \uac04\uacb0\ud558\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774 \ud568\uc218\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe"),"\uc5d0 \ub300\ud574 \ud328\ud134 \ub9e4\uce6d\uc744 \ud558\ub294 \uac83\uacfc \ube44\uc2b7\ud558\uac8c \uc791\ub3d9\ud569\ub2c8\ub2e4:\n",(0,r.kt)("inlineCode",{parentName:"p"},"maybe"),"\uc758 \uc138 \ubc88\uc9f8 \uc778\uc790\ub294 \ud328\ud134 \ub9e4\uce6d\ud560 \uac12\uc774\uace0,\n\ub450 \ubc88\uc9f8 \uc778\uc790\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"Just"),"\uc778 \uacbd\uc6b0\uc5d0 \uc801\uc6a9\ud560 \ud568\uc218\uc774\uba70,\n\uccab \ubc88\uc9f8 \uc778\uc790\ub294 \ud328\ud134 \ub9e4\uce6d\ud55c \uacb0\uacfc\uac00 ",(0,r.kt)("inlineCode",{parentName:"p"},"Nothing"),"\uc778 \uacbd\uc6b0 \ubc18\ud658\ud560 \uac12\uc785\ub2c8\ub2e4.\n",(0,r.kt)("inlineCode",{parentName:"p"},"maybe id (:) context (parseLines Nothing rest)"),"\ub97c \ud328\ud134 \ub9e4\uce6d\uc744 \uc0ac\uc6a9\ud55c \ucf54\ub4dc\ub85c \ubc14\uafd4\ubcf4\uc138\uc694!"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\uc815\ub2f5"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"( case context of\n    Nothing -> id\n    Just structure -> (:) structure\n) (parseLines Nothing rest)\n")),(0,r.kt)("p",{parentName:"li"},"case \ud45c\ud604\uc2dd\uc758 \uacb0\uacfc\uac00 \ud0c0\uc785\uc774 ",(0,r.kt)("inlineCode",{parentName:"p"},"Document -> Document"),"\uc778 \ud568\uc218\ub77c\ub294 \uac83\uc5d0 \uc8fc\ubaa9\ud558\uc138\uc694.\n",(0,r.kt)("inlineCode",{parentName:"p"},"(:)"),"\uc5d0 ",(0,r.kt)("inlineCode",{parentName:"p"},"structure"),"\uc744 \ubd80\ubd84\uc801\uc73c\ub85c \uc801\uc6a9\ud558\uc5ec ",(0,r.kt)("inlineCode",{parentName:"p"},"structure"),"\uc744 \uc55e\uc5d0 \ubd99\uc774\ub294 \ud568\uc218\ub97c \ub9cc\ub4e4\uace0,\n",(0,r.kt)("inlineCode",{parentName:"p"},"parseLines Nothing rest"),"\ub97c case \ud45c\ud604\uc2dd\uc5d0 \uc801\uc6a9\ud558\ub294 \ubc29\uc2dd\uc744 \uc0b4\ud3b4\ubcf4\uc138\uc694.")),(0,r.kt)("p",{parentName:"li"},"\ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud328\ud134 \ub9e4\uce6d\uc744 \uc778\ucf54\ub529\ud558\ub294 \uc774\ub7ec\ud55c \ubc29\uc2dd\uc740 \uc790\uc8fc \uc0ac\uc6a9\ub429\ub2c8\ub2e4."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"(:)")," \uadf8\ub9ac\uace0 ",(0,r.kt)("inlineCode",{parentName:"p"},"maybe id (:)"),"\uc758 \ud0c0\uc785\uc744 GHCi\uc5d0\uc11c \ud655\uc778\ud574\ubcf4\uc138\uc694!")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\uc557! \uc804\uc5d0 (",(0,r.kt)("inlineCode",{parentName:"p"},"unwords")," \ud568\uc218\uac00 \ud558\ub294) ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),"\uc774\ub098 \ub9ac\uc2a4\ud2b8 \ub4a4\uc5d0 \uc694\uc18c\ub97c \ucd94\uac00\ud558\ub294 \uac83\uc740 \ub290\ub9ac\ub2e4\uace0 \ud558\uc9c0 \uc54a\uc558\ub098\uc694?\n\ub9de\uc2b5\ub2c8\ub2e4! \ud558\uc9c0\ub9cc \uc6b0\ub9ac\uc758 ",(0,r.kt)("inlineCode",{parentName:"p"},"Structure")," \ud0c0\uc785\uc5d0\uc11c\ub294 \ubb38\ub2e8\uc774 ",(0,r.kt)("inlineCode",{parentName:"p"},"Paragraph String"),"\uc73c\ub85c \uc815\uc758\ub418\uc5b4 \uc788\uace0,\n",(0,r.kt)("inlineCode",{parentName:"p"},"Paragraph [String]"),"\uc774 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 \ub9ac\uc2a4\ud2b8\ub97c \ub4a4\uc9d1\ub294 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4."),(0,r.kt)("p",{parentName:"li"},"\uadf8\ub7fc \uc5b4\ub5bb\uac8c \ud574\uc57c \ud560\uae4c\uc694?\n\uc774\ub97c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc5d0\ub294 \uc5ec\ub7ec \uac00\uc9c0\uac00 \uc788\uc9c0\ub9cc, \ud55c \uac00\uc9c0 \uac04\ub2e8\ud55c \ubc29\ubc95\uc740 \uc62c\ubc14\ub978 \ubaa8\uc591\uc73c\ub85c \ub2e4\ub978 \ud0c0\uc785\uc744 \ub9cc\ub4dc\ub294 \uac83\uc785\ub2c8\ub2e4:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"data Context\n  = CtxHeading Natural String\n  | CtxParagraph [String]\n  | CtxUnorderedList [String]\n  | CtxOrderedList [String]\n  | CtxCodeBlock [String]\n")),(0,r.kt)("p",{parentName:"li"},"\ud558\uc2a4\ucf08\uc5d0\uc11c \uc0c8\ub85c\uc6b4 \ud0c0\uc785\uc744 \ub9cc\ub4dc\ub294 \uac83\uc740 \ube44\uc6a9\uc774 \uc800\ub834\ud558\uae30\uc5d0, \uc774 \ubc29\ubc95\uc740 \ub9e4\uc6b0 \uc720\uc6a9\ud569\ub2c8\ub2e4."),(0,r.kt)("p",{parentName:"li"},"\ud558\uc9c0\ub9cc \uc774\ubc88\uc5d0\ub294 \uc704\uc640 \uac19\uc740 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uaca0\uc2b5\ub2c8\ub2e4.\n\uc65c\ub0d0\ud558\uba74 \ub098\uc911\uc5d0 \ud544\uc694\ud55c \uacbd\uc6b0 \uc27d\uac8c \uc218\uc815\ud560 \uc218 \uc788\ub294 \ub85c\uceec \ucf54\ub4dc \uc870\uac01\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4."))),(0,r.kt)("p",null,"\ub2e4\uc74c \ud30c\uc2f1 \ub2e8\uacc4\ub85c \ub118\uc5b4\uac00 \uc774\ubc88\uc5d0\ub294 \uc81c\ubaa9\uacfc \ub9ac\uc2a4\ud2b8\ub97c \ucc98\ub9ac\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\uc904\uc758 \uccab \ubc88\uc9f8 \ubb38\uc790\ub97c \uac80\uc0ac\ud558\uc5ec \uc774\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"parse :: String -> Document\nparse = parseLines Nothing . lines\n\nparseLines :: Maybe Structure -> [String] -> Document\nparseLines context txts =\n  case txts of\n    -- \uc885\ub8cc \uc870\uac74\n    [] -> maybeToList context\n\n    -- \uc81c\ubaa9 1 \uc778 \uacbd\uc6b0\n    ('*' : ' ' : line) : rest ->\n      maybe id (:) context (Heading 1 (trim line) : parseLines Nothing rest)\n\n    -- \uc21c\uc11c \uc5c6\ub294 \ubaa9\ub85d\uc778 \uacbd\uc6b0\n    ('-' : ' ' : line) : rest ->\n      case context of\n        Just (UnorderedList list) ->\n          parseLines (Just (UnorderedList (list <> [trim line]))) rest\n\n        _ ->\n          maybe id (:) context (parseLines (Just (UnorderedList [trim line])) rest)\n\n    -- \ubb38\ub2e8\uc778 \uacbd\uc6b0\n    currentLine : rest ->\n      let\n        line = trim currentLine\n      in\n        if line == \"\"\n          then\n            maybe id (:) context (parseLines Nothing rest)\n          else\n            case context of\n              Just (Paragraph paragraph) ->\n                parseLines (Just (Paragraph (unwords [paragraph, line]))) rest\n              _ ->\n                maybe id (:) context (parseLines (Just (Paragraph line)) rest)\n\ntrim :: String -> String\ntrim = unwords . words\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"\uc5f0\uc2b5\ubb38\uc81c: ",(0,r.kt)("inlineCode",{parentName:"p"},"\ucf54\ub4dc \ube14\ub85d"),"\uacfc ",(0,r.kt)("inlineCode",{parentName:"p"},"\uc21c\uc11c \uc788\ub294 \ubaa9\ub85d"),"\uc758 \uacbd\uc6b0\ub3c4 \ucc98\ub9ac\ud574\ubcf4\uc138\uc694!"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\uc815\ub2f5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell",metastring:'title="Markup.hs"',title:'"Markup.hs"'},"module Markup\n  ( Document\n  , Structure(..)\n  , parse\n  )\nwhere\n\nimport Numeric.Natural\nimport Data.Maybe (maybeToList)\n\ntype Document\n  = [Structure]\n\ndata Structure\n  = Heading Natural String\n  | Paragraph String\n  | UnorderedList [String]\n  | OrderedList [String]\n  | CodeBlock [String]\n  deriving (Eq, Show)    -- (1)\n\n\nparse :: String -> Document\nparse = parseLines Nothing . lines\n\nparseLines :: Maybe Structure -> [String] -> Document\nparseLines context txts =\n  case txts of\n    -- done case\n    [] -> maybeToList context\n\n    -- Heading 1 case\n    ('*' : ' ' : line) : rest ->\n      maybe id (:) context (Heading 1 (trim line) : parseLines Nothing rest)\n\n    -- Unordered list case\n    ('-' : ' ' : line) : rest ->\n      case context of\n        Just (UnorderedList list) ->\n          parseLines (Just (UnorderedList (list <> [trim line]))) rest\n\n        _ ->\n          maybe id (:) context (parseLines (Just (UnorderedList [trim line])) rest)\n\n    -- Ordered list case\n    ('#' : ' ' : line) : rest ->\n      case context of\n        Just (OrderedList list) ->\n          parseLines (Just (OrderedList (list <> [trim line]))) rest\n\n        _ ->\n          maybe id (:) context (parseLines (Just (OrderedList [trim line])) rest)\n\n    -- Code block case\n    ('>' : ' ' : line) : rest ->\n      case context of\n        Just (CodeBlock code) ->\n          parseLines (Just (CodeBlock (code <> [line]))) rest\n\n        _ ->\n          maybe id (:) context (parseLines (Just (CodeBlock [line])) rest)\n\n    -- Paragraph case\n    currentLine : rest ->\n      let\n        line = trim currentLine\n      in\n        if line == \"\"\n          then\n            maybe id (:) context (parseLines Nothing rest)\n          else\n            case context of\n              Just (Paragraph paragraph) ->\n                parseLines (Just (Paragraph (unwords [paragraph, line]))) rest\n              _ ->\n                maybe id (:) context (parseLines (Just (Paragraph line)) rest)\n\ntrim :: String -> String\ntrim = unwords . words\n"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"\uc6b0\ub9ac\uc758-\ud30c\uc11c\uac00-\uc81c\ub300\ub85c-\ub3d9\uc791\ud558\ub294\uc9c0-\uc5b4\ub5bb\uac8c-\uc54c-\uc218-\uc788\uc744\uae4c\uc694"},"\uc6b0\ub9ac\uc758 \ud30c\uc11c\uac00 \uc81c\ub300\ub85c \ub3d9\uc791\ud558\ub294\uc9c0 \uc5b4\ub5bb\uac8c \uc54c \uc218 \uc788\uc744\uae4c\uc694?"),(0,r.kt)("p",null,"\uc774\uc804 \uc7a5\uc5d0\uc11c, \uc6b0\ub9ac\ub294 \uba87 \uac00\uc9c0 \ub9c8\ud06c\uc5c5 \uc5b8\uc5b4 \uc608\uc81c\ub97c \uc9c1\uc811 \ud30c\uc2f1\ud574\ubd24\uc2b5\ub2c8\ub2e4. (",(0,r.kt)("a",{parentName:"p",href:"/learn-haskell-blog-generator/markup/data-type#exercises"},"\uad00\ub828 \uc5f0\uc2b5\ubb38\uc81c"),")\n",(0,r.kt)("inlineCode",{parentName:"p"},"Structure")," \ub370\uc774\ud130 \ud0c0\uc785\uc758 ",(0,r.kt)("inlineCode",{parentName:"p"},"Eq")," \uc778\uc2a4\ud134\uc2a4\ub97c \ub9cc\ub4e4\uc5c8\uc73c\ubbc0\ub85c (\uc704 \uc815\ub2f5\uc5d0\uc11c (1) \ud45c\uc2dc\ub41c \ubd80\ubd84)\n\uc774\uc81c ",(0,r.kt)("inlineCode",{parentName:"p"},"==")," \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub450 \uacb0\uacfc\uac00 \uac19\uc740\uc9c0 \ube44\uad50\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("p",null,"GHCi\ub97c \uc0ac\uc6a9\ud574 \ud655\uc778\ud574\ubcf4\uc138\uc694! \ub2e4\uc74c\uacfc \uac19\uc740 \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud14d\uc2a4\ud2b8 \ud30c\uc77c\uc744 \uc77d\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},'ghci> txt <- readFile "/tmp/sample.txt"\n')),(0,r.kt)("p",null,"\uadf8\ub9ac\uace0 \uc774\uc804 \uc190\uc73c\ub85c \uc791\uc131\ud55c \ub2f5\uc548\uacfc \uc774\ubc88\uc5d0 \uc791\uc131\ud55c \uc815\ub2f5\uacfc \ube44\uad50\ud574\ubcf4\uc138\uc694\n(\ubaa8\ub4c8\uc5d0 \ucd94\uac00\ud558\uace0 GHCi\uc5d0\uc11c \ubd88\ub7ec\uc628 \ud6c4 \uc218\ud589\ud558\uc138\uc694):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"ghci> parse txt == example4\n")),(0,r.kt)("p",null,"\uc774\ud6c4 \uc7a5\uc5d0\uc11c, \ud14c\uc2a4\ud2b8 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc790\ub3d9\ud654\ub41c \ud14c\uc2a4\ud2b8\ub97c \uc791\uc131\ud560 \uac83\uc785\ub2c8\ub2e4.\n\ud558\uc9c0\ub9cc \uadf8 \uc804\uc5d0, \ub2e4\uc74c\uacfc \uac19\uc740 \uc791\uc5c5\ub4e4\uc744 \ud558\ub098\ub85c \ubb36\ub294 \uc791\uc5c5\uc744 \uc9c4\ud589\ud558\uace0\uc790 \ud569\ub2c8\ub2e4."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\ud30c\uc77c\uc5d0\uc11c \ub9c8\ud06c\uc5c5 \ud14d\uc2a4\ud2b8 \uc77d\uae30"),(0,r.kt)("li",{parentName:"ol"},"\ud14d\uc2a4\ud2b8 \ud30c\uc2f1\ud558\uae30"),(0,r.kt)("li",{parentName:"ol"},"HTML EDSL\ub85c \ubcc0\ud658\ud558\uae30"),(0,r.kt)("li",{parentName:"ol"},"HTML \ucf54\ub4dc \uc0dd\uc131\ud558\uae30")),(0,r.kt)("p",null,"\ub610\ud55c \ud558\uc2a4\ucf08\uc5d0\uc11c IO \ub97c \uc5b4\ub5bb\uac8c \ub2e4\ub8e8\ub294\uc9c0\ub3c4 \ud568\uaed8 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Git \ucee4\ubc0b\uc744 \ud1b5\ud574\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/soupi/learn-haskell-blog-generator/commit/9f951a05d4f78cf59190ee4f3cd8de85e1c33bd1"},"\uc774\ubc88\uc5d0 \uc218\uc815\ud55c \ub0b4\uc5ed"),"\n\uacfc ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/soupi/learn-haskell-blog-generator/tree/9f951a05d4f78cf59190ee4f3cd8de85e1c33bd1"},"\ud604\uc7ac\uae4c\uc9c0 \ucf54\ub4dc")," \ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.")))}m.isMDXComponent=!0}}]);