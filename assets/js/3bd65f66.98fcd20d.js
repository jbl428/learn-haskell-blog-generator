"use strict";(self.webpackChunklearn_haskell_blog_generator=self.webpackChunklearn_haskell_blog_generator||[]).push([[550],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=i(n),g=l,h=m["".concat(c,".").concat(g)]||m[g]||s[g]||a;return n?r.createElement(h,u(u({ref:t},p),{},{components:n})):r.createElement(h,u({ref:t},p))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,u=new Array(a);u[0]=g;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[m]="string"==typeof e?e:l,u[1]=o;for(var i=2;i<a;i++)u[i]=n[i];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2645:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>s,frontMatter:()=>a,metadata:()=>o,toc:()=>i});var r=n(7462),l=(n(7294),n(3905));const a={},u="\uc694\uc57d",o={unversionedId:"html/summary",id:"html/summary",title:"\uc694\uc57d",description:"\uc774\ubc88 \uc7a5\uc5d0\uc11c\ub294 \ub9e4\uc6b0 \ucd5c\uc18c\ud55c\uc758 HTML EDSL\uc744 \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.",source:"@site/docs/03-html/09-summary.md",sourceDirName:"03-html",slug:"/html/summary",permalink:"/learn-haskell-blog-generator/html/summary",draft:!1,editUrl:"https://github.com/jbl428/learn-haskell-blog-generator/tree/book/docs/03-html/09-summary.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\uc5f0\uc2b5\ubb38\uc81c",permalink:"/learn-haskell-blog-generator/html/exercises"},next:{title:"Custom markup language",permalink:"/learn-haskell-blog-generator/markup/"}},c={},i=[],p={toc:i},m="wrapper";function s(e){let{components:t,...n}=e;return(0,l.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"\uc694\uc57d"},"\uc694\uc57d"),(0,l.kt)("p",null,"\uc774\ubc88 \uc7a5\uc5d0\uc11c\ub294 \ub9e4\uc6b0 \ucd5c\uc18c\ud55c\uc758 HTML EDSL\uc744 \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.\n\uc774\ud6c4\uc5d0 \uc774 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec \ucee4\uc2a4\ud140 \ub9c8\ud06c\uc5c5 \ud615\uc2dd\uc758 \ud14d\uc2a4\ud2b8\ub97c HTML\ub85c \ubcc0\ud658\ud560 \uac83\uc785\ub2c8\ub2e4."),(0,l.kt)("p",null,"\uc774\ubc88 \uc7a5\uc5d0\uc11c \uc6b0\ub9ac\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uac83\ub4e4\uc744 \ubc30\uc6e0\uc2b5\ub2c8\ub2e4:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\ud568\uc218\ub97c \uc815\uc758\ud558\uace0 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95"),(0,l.kt)("li",{parentName:"ul"},"\ud0c0\uc785\uacfc \ud0c0\uc785 \uc2dc\uadf8\ub2c8\ucc98"),(0,l.kt)("li",{parentName:"ul"},"\ub0b4\uc7a5 \ub3c4\uba54\uc778 \ud2b9\ud654 \uc5b8\uc5b4"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".")," \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud568\uc218\ub97c \ud569\uc131"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"newtype"),"\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc798\ubabb\ub41c \uc0ac\uc6a9\uc744 \ubc29\uc9c0"),(0,l.kt)("li",{parentName:"ul"},"\ubaa8\ub4c8\uc744 \uc815\uc758\ud558\ub294 \ubc29\ubc95\uacfc ",(0,l.kt)("inlineCode",{parentName:"li"},"\ub0b4\ubd80")," \ubaa8\ub4c8 \ud328\ud134"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"newtype"),"\uacfc \ubaa8\ub4c8\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucea1\uc290\ud654\ud558\uae30")),(0,l.kt)("p",null,"\uc9c0\uae08\uae4c\uc9c0 \uc791\uc131\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-haskell",metastring:'title="hello.hs"',title:'"hello.hs"'},'import Html\n\nmain :: IO ()\nmain = putStrLn (render myhtml)\n\nmyhtml :: Html\nmyhtml =\n  html_\n    "My title"\n    ( append_\n      (h1_ "Heading")\n      ( append_\n        (p_ "Paragraph #1")\n        (p_ "Paragraph #2")\n      )\n    )\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-haskell",metastring:'title="Html.hs"',title:'"Html.hs"'},"module Html\n  ( Html\n  , Title\n  , Structure\n  , html_\n  , h1_\n  , p_\n  , ul_\n  , ol_\n  , code_\n  , append_\n  , render\n  )\n  where\n\nimport Html.Internal\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-haskell",metastring:'title="Html/Internal.hs"',title:'"Html/Internal.hs"'},'module Html.Internal where\n\n-- * Types\n\nnewtype Html\n  = Html String\n\nnewtype Structure\n  = Structure String\n\ntype Title\n  = String\n\n-- * EDSL\n\nhtml_ :: Title -> Structure -> Html\nhtml_ title content =\n  Html\n    ( el "html"\n      ( el "head" (el "title" (escape title))\n        <> el "body" (getStructureString content)\n      )\n    )\n\np_ :: String -> Structure\np_ = Structure . el "p" . escape\n\nh1_ :: String -> Structure\nh1_ = Structure . el "h1" . escape\n\nul_ :: [Structure] -> Structure\nul_ =\n  Structure . el "ul" . concat . map (el "li" . getStructureString)\n\nol_ :: [Structure] -> Structure\nol_ =\n  Structure . el "ol" . concat . map (el "li" . getStructureString)\n\ncode_ :: String -> Structure\ncode_ = Structure . el "pre" . escape\n\nappend_ :: Structure -> Structure -> Structure\nappend_ c1 c2 =\n  Structure (getStructureString c1 <> getStructureString c2)\n\n-- * Render\n\nrender :: Html -> String\nrender html =\n  case html of\n    Html str -> str\n\n-- * Utilities\n\nel :: String -> String -> String\nel tag content =\n  "<" <> tag <> ">" <> content <> "</" <> tag <> ">"\n\ngetStructureString :: Structure -> String\ngetStructureString content =\n  case content of\n    Structure str -> str\n\nescape :: String -> String\nescape =\n  let\n    escapeChar c =\n      case c of\n        \'<\' -> "&lt;"\n        \'>\' -> "&gt;"\n        \'&\' -> "&amp;"\n        \'"\' -> "&quot;"\n        \'\\\'\' -> "&#39;"\n        _ -> [c]\n  in\n    concat . map escapeChar\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://github.com/soupi/learn-haskell-blog-generator/tree/2a4691de627bcb280e92f3d02a88d5404179dc86"},"\uc800\uc7a5\uc18c \ucf54\ub4dc"),"\uc5d0\uc11c \ud655\uc778\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.")))}s.isMDXComponent=!0}}]);