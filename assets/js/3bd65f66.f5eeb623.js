"use strict";(self.webpackChunklearn_haskell_blog_generator=self.webpackChunklearn_haskell_blog_generator||[]).push([[3550],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),m=c(n),g=l,d=m["".concat(i,".").concat(g)]||m[g]||s[g]||a;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=g;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u[m]="string"==typeof e?e:l,o[1]=u;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2645:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>s,frontMatter:()=>a,metadata:()=>u,toc:()=>c});var r=n(7462),l=(n(7294),n(3905));const a={},o="Summary",u={unversionedId:"html/summary",id:"html/summary",title:"Summary",description:"In this chapter we built a very minimal HTML EDSL.",source:"@site/docs/03-html/09-summary.md",sourceDirName:"03-html",slug:"/html/summary",permalink:"/learn-haskell-blog-generator/docs/html/summary",draft:!1,editUrl:"https://github.com/jbl428/learn-haskell-blog-generator/tree/book/docs/03-html/09-summary.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Exercises",permalink:"/learn-haskell-blog-generator/docs/html/exercises"},next:{title:"HTML \ucd9c\ub825 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub9cc\ub4e4\uae30",permalink:"/learn-haskell-blog-generator/docs/html_printer"}},i={},c=[],p={toc:c},m="wrapper";function s(e){let{components:t,...n}=e;return(0,l.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"summary"},"Summary"),(0,l.kt)("p",null,"In this chapter we built a very minimal HTML EDSL.\nWe will later use this library to convert our custom markup formatted text to HTML."),(0,l.kt)("p",null,"We've also learned about:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Defining and using functions"),(0,l.kt)("li",{parentName:"ul"},"Types and type signatures"),(0,l.kt)("li",{parentName:"ul"},"Embedded domain specific languages"),(0,l.kt)("li",{parentName:"ul"},"Chaining functions using the ",(0,l.kt)("inlineCode",{parentName:"li"},".")," operator"),(0,l.kt)("li",{parentName:"ul"},"Preventing incorrect use with ",(0,l.kt)("inlineCode",{parentName:"li"},"newtype"),"s"),(0,l.kt)("li",{parentName:"ul"},"Defining modules and the ",(0,l.kt)("inlineCode",{parentName:"li"},"Internal")," module pattern"),(0,l.kt)("li",{parentName:"ul"},"Encapsulation using ",(0,l.kt)("inlineCode",{parentName:"li"},"newtype"),"s and modules")),(0,l.kt)("p",null,"Here's our complete program up to this point:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-haskell"},'-- hello.hs\n\nimport Html\n\nmain :: IO ()\nmain = putStrLn (render myhtml)\n\nmyhtml :: Html\nmyhtml =\n  html_\n    "My title"\n    ( append_\n      (h1_ "Heading")\n      ( append_\n        (p_ "Paragraph #1")\n        (p_ "Paragraph #2")\n      )\n    )\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-haskell"},"-- Html.hs\n\nmodule Html\n  ( Html\n  , Title\n  , Structure\n  , html_\n  , h1_\n  , p_\n  , ul_\n  , ol_\n  , code_\n  , append_\n  , render\n  )\n  where\n\nimport Html.Internal\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-haskell"},'-- Html/Internal.hs\n\nmodule Html.Internal where\n\n-- * Types\n\nnewtype Html\n  = Html String\n\nnewtype Structure\n  = Structure String\n\ntype Title\n  = String\n\n-- * EDSL\n\nhtml_ :: Title -> Structure -> Html\nhtml_ title content =\n  Html\n    ( el "html"\n      ( el "head" (el "title" (escape title))\n        <> el "body" (getStructureString content)\n      )\n    )\n\np_ :: String -> Structure\np_ = Structure . el "p" . escape\n\nh1_ :: String -> Structure\nh1_ = Structure . el "h1" . escape\n\nul_ :: [Structure] -> Structure\nul_ =\n  Structure . el "ul" . concat . map (el "li" . getStructureString)\n\nol_ :: [Structure] -> Structure\nol_ =\n  Structure . el "ol" . concat . map (el "li" . getStructureString)\n\ncode_ :: String -> Structure\ncode_ = Structure . el "pre" . escape\n\nappend_ :: Structure -> Structure -> Structure\nappend_ c1 c2 =\n  Structure (getStructureString c1 <> getStructureString c2)\n\n-- * Render\n\nrender :: Html -> String\nrender html =\n  case html of\n    Html str -> str\n\n-- * Utilities\n\nel :: String -> String -> String\nel tag content =\n  "<" <> tag <> ">" <> content <> "</" <> tag <> ">"\n\ngetStructureString :: Structure -> String\ngetStructureString content =\n  case content of\n    Structure str -> str\n\nescape :: String -> String\nescape =\n  let\n    escapeChar c =\n      case c of\n        \'<\' -> "&lt;"\n        \'>\' -> "&gt;"\n        \'&\' -> "&amp;"\n        \'"\' -> "&quot;"\n        \'\\\'\' -> "&#39;"\n        _ -> [c]\n  in\n    concat . map escapeChar\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"You can also ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/soupi/learn-haskell-blog-generator/tree/2a4691de627bcb280e92f3d02a88d5404179dc86"},"browse the code as a tree"),".")))}s.isMDXComponent=!0}}]);