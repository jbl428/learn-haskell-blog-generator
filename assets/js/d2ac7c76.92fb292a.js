"use strict";(self.webpackChunklearn_haskell_blog_generator=self.webpackChunklearn_haskell_blog_generator||[]).push([[934],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),k=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=k(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=k(n),c=r,d=m["".concat(o,".").concat(c)]||m[c]||h[c]||l;return n?a.createElement(d,i(i({ref:t},s),{},{components:n})):a.createElement(d,i({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[m]="string"==typeof e?e:r,i[1]=p;for(var k=2;k<l;k++)i[k]=n[k];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4652:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>k});var a=n(7462),r=(n(7294),n(3905));const l={},i="Either\ub97c \ud65c\uc6a9\ud55c \uc5d0\ub7ec \ucc98\ub9ac",p={unversionedId:"errors_and_files/either",id:"errors_and_files/either",title:"Either\ub97c \ud65c\uc6a9\ud55c \uc5d0\ub7ec \ucc98\ub9ac",description:"\ud558\uc2a4\ucf08\uc5d0\uc11c \uc5d0\ub7ec\ub97c \ud45c\ud604\ud558\uace0 \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc740 \uc5ec\ub7ec\uac00\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4.",source:"@site/docs/06-errors_and_files/01-either.md",sourceDirName:"06-errors_and_files",slug:"/errors_and_files/either",permalink:"/learn-haskell-blog-generator/errors_and_files/either",draft:!1,editUrl:"https://github.com/jbl428/learn-haskell-blog-generator/tree/book/docs/06-errors_and_files/01-either.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\uc5d0\ub7ec \ucc98\ub9ac\uc640 \uc5ec\ub7ec \ud30c\uc77c \ub2e4\ub8e8\uae30",permalink:"/learn-haskell-blog-generator/errors_and_files/"},next:{title:"Either\uc640 IO",permalink:"/learn-haskell-blog-generator/errors_and_files/except"}},o={},k=[{value:"Applicative + Traversable",id:"applicative--traversable",level:2},{value:"\uc5d0\ub7ec\uac00 \uc5ec\ub7ec \uac1c\uc778 \uacbd\uc6b0",id:"\uc5d0\ub7ec\uac00-\uc5ec\ub7ec-\uac1c\uc778-\uacbd\uc6b0",level:2},{value:"\ubaa8\ub098\ub515 \uc778\ud130\ud398\uc774\uc2a4",id:"\ubaa8\ub098\ub515-\uc778\ud130\ud398\uc774\uc2a4",level:2},{value:"Do \ud45c\uae30\ubc95",id:"do-\ud45c\uae30\ubc95",level:3},{value:"\uc694\uc57d",id:"\uc694\uc57d",level:2}],s={toc:k},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"either\ub97c-\ud65c\uc6a9\ud55c-\uc5d0\ub7ec-\ucc98\ub9ac"},"Either\ub97c \ud65c\uc6a9\ud55c \uc5d0\ub7ec \ucc98\ub9ac"),(0,r.kt)("p",null,"\ud558\uc2a4\ucf08\uc5d0\uc11c \uc5d0\ub7ec\ub97c \ud45c\ud604\ud558\uace0 \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc740 \uc5ec\ub7ec\uac00\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n\uc6b0\ub9ac\ub294 \uadf8 \uc911 \ud558\ub098\uc778 ",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Either.html"},"Either"),"\ub97c \uc0b4\ud3b4\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4.\nEither\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"data Either a b\n  = Left a\n  | Right b\n")),(0,r.kt)("p",null,"\uac04\ub2e8\ud558\uac8c \uc124\uba85\ud558\uba74, ",(0,r.kt)("inlineCode",{parentName:"p"},"Either a b")," \ud0c0\uc785\uc758 \uac12\uc740 ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," \ud0c0\uc785\uc758 \uac12\uc774\uac70\ub098 ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," \ud0c0\uc785\uc758 \uac12\uc774\ub77c\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ub2e4\uc74c \uc0dd\uc131\uc790\ub97c \ud1b5\ud574 \uc5b4\ub5a4 \ud0c0\uc785\uc758 \uac12\uc778\uc9c0 \uad6c\ubd84\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"Left True :: Either Bool b\nRight 'a' :: Either a Char\n")),(0,r.kt)("p",null,"\uc774\ub7ec\ud55c \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\uba74, ",(0,r.kt)("inlineCode",{parentName:"p"},"Left")," \uc0dd\uc131\uc790\ub97c \ud1b5\ud574 \uc5d0\ub7ec \uac12\uacfc \ud568\uaed8 \uc2e4\ud328\ub97c \ud45c\ud604\ud560 \uc218 \uc788\uace0, ",(0,r.kt)("inlineCode",{parentName:"p"},"Right")," \uc0dd\uc131\uc790\ub97c \ud1b5\ud574 \uc608\uc0c1\ub418\ub294 \uacb0\uacfc\uacfc \ud568\uaed8 \uc131\uacf5\uc744 \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"\ub294 \ub2e4\ud615\uc801\uc774\uae30 \ub54c\ubb38\uc5d0, \uc2e4\ud328\uc640 \uc131\uacf5\uc744 \ud45c\ud604\ud558\ub294 \ub370 \ub450 \ud0c0\uc785 \uc5b4\ub290 \uac83\uc744 \uc0ac\uc6a9\ud574\ub3c4 \uc0c1\uad00\uc5c6\uc2b5\ub2c8\ub2e4.\n\ub54c\ub860 \uc2e4\ud328 \ubaa8\ub4dc\ub97c ADT\ub85c \ud45c\ud604\ud558\ub294 \uac83\uc774 \uc720\uc6a9\ud560 \ub54c\uac00 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("p",null,"\uc608\ub97c \ub4e4\uc5b4, ",(0,r.kt)("inlineCode",{parentName:"p"},"Char"),"\ub97c \uc22b\uc790\ub85c \ud30c\uc2f1\ud558\uc5ec ",(0,r.kt)("inlineCode",{parentName:"p"},"Int"),"\ub85c \ubcc0\ud658\ud558\ub824\uace0 \ud569\uc2dc\ub2e4.\n\ubb38\uc790\uac00 \uc22b\uc790\uac00 \uc544\ub2d0 \uacbd\uc6b0 \uc774 \uc5f0\uc0b0\uc740 \uc2e4\ud328\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774\ub7ec\ud55c \uc2e4\ud328\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574 \ub2e4\uc74c\uacfc \uac19\uc740 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"data ParseDigitError\n  = NotADigit Char\n  deriving Show\n")),(0,r.kt)("p",null,"\uadf8\ub9ac\uace0 \ud30c\uc2f1 \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ud0c0\uc785\uc744 \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"parseDigit :: Char -> Either ParseDigitError Int\n")),(0,r.kt)("p",null,"\uc774\uc81c \ud30c\uc2f1\ud568\uc218\ub97c \uad6c\ud604\ud558\uc5ec, \ubb38\uc81c\ub97c \uc124\uba85\ud558\ub294 \uc5d0\ub7ec\ub97c ",(0,r.kt)("inlineCode",{parentName:"p"},"Left"),"\uc5d0 \ub2f4\uace0, \ud30c\uc2f1\uc5d0 \uc131\uacf5\ud55c \uacbd\uc6b0\uc5d0\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"Right"),"\uc5d0 \ub2f4\uc544 \ubc18\ud658\ud558\uba74 \ub429\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"parseDigit :: Char -> Either ParseDigitError Int\nparseDigit c =\n  case c of\n    '0' -> Right 0\n    '1' -> Right 1\n    '2' -> Right 2\n    '3' -> Right 3\n    '4' -> Right 4\n    '5' -> Right 5\n    '6' -> Right 6\n    '7' -> Right 7\n    '8' -> Right 8\n    '9' -> Right 9\n    _ -> Left (NotADigit c)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"\ub294 \ub610\ud55c ",(0,r.kt)("inlineCode",{parentName:"p"},"Functor"),"\uc640 ",(0,r.kt)("inlineCode",{parentName:"p"},"Applicative")," \uc778\uc2a4\ud134\uc2a4\uc774\uae30 \ub54c\ubb38\uc5d0, \uc774\ub7ec\ud55c \uc885\ub958\uc758 \uacc4\uc0b0\uc744 \uacb0\ud569\ud558\ub824\uba74 \uba87 \uac00\uc9c0 \uc870\ud569\uae30\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("p",null,"\uc608\ub97c \ub4e4\uc5b4, \uc138 \uac1c\uc758 \ubb38\uc790\ub97c \ud30c\uc2f1\ud558\uace0 \uadf8 \uc911 \ucd5c\ub300 \uac12\uc744 \ucc3e\uc73c\ub824\uba74 applicative \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"max3chars :: Char -> Char -> Char -> Either ParseDigitError Int\nmax3chars x y z =\n  (\\a b c -> max a (max b c))\n    <$> parseDigit x\n    <*> parseDigit y\n    <*> parseDigit z\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Either a"),"\uc758 ",(0,r.kt)("inlineCode",{parentName:"p"},"Functor"),"\uc640 ",(0,r.kt)("inlineCode",{parentName:"p"},"Applicative")," \uc778\ud130\ud398\uc774\uc2a4\ub294 \ud568\uc218\ub97c \ud398\uc774\ub85c\ub4dc \uac12\uc5d0 \uc801\uc6a9\ud558\uace0 \uc5d0\ub7ec \ucc98\ub9ac\ub97c ",(0,r.kt)("strong",{parentName:"p"},"\uc9c0\uc5f0"),"\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\uc90d\ub2c8\ub2e4.\n\uc758\ubbf8\uc801\uc73c\ub85c, ",(0,r.kt)("inlineCode",{parentName:"p"},"Left"),"\ub97c \ubc18\ud658\ud558\ub294 \uccab \ubc88\uc9f8 Either\uac00 \ubc18\ud658 \uac12\uc774 \ub429\ub2c8\ub2e4.\nApplicative \uc778\uc2a4\ud134\uc2a4\uc758 \uad6c\ud604\uc5d0\uc11c \uc774\uac83\uc774 \uc5b4\ub5bb\uac8c \uc791\ub3d9\ud558\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"instance Applicative (Either e) where\n    pure          = Right\n    Left  e <*> _ = Left e\n    Right f <*> r = fmap f r\n")),(0,r.kt)("p",null,"\uc774\ud6c4\uc5d0 \ub204\uad70\uac00\ub294 \uc2e4\uc81c\ub85c \uacb0\uacfc\ub97c ",(0,r.kt)("strong",{parentName:"p"},"\uac80\uc0ac"),"\ud558\uace0 \uc5d0\ub7ec(Left \uc0dd\uc131\uc790)\uac00 \ubc1c\uc0dd\ud588\ub294\uc9c0, \uc608\uc0c1\ud55c \uac12(Right \uc0dd\uc131\uc790)\uc774 \ubc1c\uc0dd\ud588\ub294\uc9c0 \ud655\uc778\ud558\uace0 \uc2f6\uc744 \uac83\uc785\ub2c8\ub2e4.\n\uc774\ub97c \uc704\ud574 \ud328\ud134 \ub9e4\uce6d\uc744 \ud1b5\ud574 \uacb0\uacfc\ub97c \uac80\uc0ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("h2",{id:"applicative--traversable"},"Applicative + Traversable"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"\uc758 ",(0,r.kt)("inlineCode",{parentName:"p"},"Applicative")," \uc778\ud130\ud398\uc774\uc2a4\ub294 \ub9e4\uc6b0 \uac15\ub825\ud558\uba70, \ub2e4\ub978 \ucd94\uc0c1\ud654\uc778 ",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Data-Traversable.html#g:1"},(0,r.kt)("inlineCode",{parentName:"a"},"Traversable")),"\uc640 \uacb0\ud569\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. - \uc5f0\uacb0 \ub9ac\uc2a4\ud2b8\ub098 \uc774\uc9c4 \ud2b8\ub9ac\uc640 \uac19\uc774 \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc21c\ud68c\ud560 \uc218 \uc788\ub294 \ub370\uc774\ud130 \uad6c\uc870\ub97c \ub9d0\ud569\ub2c8\ub2e4.\n\uc774\ub97c \ud1b5\ud574 ",(0,r.kt)("inlineCode",{parentName:"p"},"Traversable"),"\ub97c \uad6c\ud604\ud558\ub294 \ub370\uc774\ud130 \uad6c\uc870\uc774\uae30\ub9cc \ud558\uba74 \uc784\uc758\uc758 \uac1c\uc218\uc758 ",(0,r.kt)("inlineCode",{parentName:"p"},"Either ParseDigitError Int"),"\uc640 \uac19\uc740 \uac12\ub4e4\uc744 \uacb0\ud569\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("p",null,"\uc608\uc81c\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},'ghci> :t "1234567"\n"1234567" :: String\n-- String\uc740 Char\uc758 \ub9ac\uc2a4\ud2b8\uc5d0 \ub300\ud55c \ubcc4\uce6d\uc778 \uac83\uc744 \uae30\uc5b5\ud558\uc138\uc694.\nghci> :info String\ntype String :: *\ntype String = [Char]\n      -- Defined in \u2018GHC.Base\u2019\n\nghci> :t map parseDigit "1234567"\nmap parseDigit "1234567" :: [Either ParseDigitError Int]\nghci> map parseDigit "1234567"\n[Right 1,Right 2,Right 3,Right 4,Right 5,Right 6,Right 7]\n\nghci> :t sequenceA\nsequenceA :: (Traversable t, Applicative f) => t (f a) -> f (t a)\n-- `t`\ub97c `[]`\ub85c, `f`\ub97c `Either Error`\ub85c \ub300\uccb4\ud574\uc11c \uc0dd\uac01\ud574\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\nghci> sequenceA (map parseDigit "1234567")\nRight [1,2,3,4,5,6,7]\n\nghci> map parseDigit "1a2"\n[Right 1,Left (NotADigit \'a\'),Right 2]\nghci> sequenceA (map parseDigit "1a2")\nLeft (NotADigit \'a\')\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"map"),"\uacfc ",(0,r.kt)("inlineCode",{parentName:"p"},"sequenceA"),"\ub97c \uacb0\ud569\ud558\ub294 \ub300\uc2e0 ",(0,r.kt)("inlineCode",{parentName:"p"},"traverse"),"\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},'ghci> :t traverse\ntraverse\n  :: (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)\nghci> traverse parseDigit "1234567"\nRight [1,2,3,4,5,6,7]\nghci> traverse parseDigit "1a2"\nLeft (NotADigit \'a\')\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Either a")," \ub610\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"IO"),"\ucc98\ub7fc ",(0,r.kt)("inlineCode",{parentName:"p"},"Applicative")," \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud55c \ud0c0\uc785\uacfc ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," \ub610\ub294\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-Map-Strict.html#t:Map"},(0,r.kt)("inlineCode",{parentName:"a"},"Map k")),"\n(\ub2e4\ub978 \uc5b8\uc5b4\uc5d0\uc11c\ub294 \ub515\uc154\ub108\ub9ac\ub77c\uace0\ub3c4 \ud568 - \ud0a4\uc640 \uac12\uc758 \ub9e4\ud551) \uc640 \uac19\uc774 ",(0,r.kt)("inlineCode",{parentName:"p"},"Traversable")," \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud55c \uc5b4\ub5a0\ud55c \ub450 \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c\ub3c4 ",(0,r.kt)("inlineCode",{parentName:"p"},"traverse"),"\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("p",null,"\uc608\ub97c \ub4e4\uc5b4 ",(0,r.kt)("inlineCode",{parentName:"p"},"IO"),"\uc640 ",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),"\ub97c \uacb0\ud569\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n",(0,r.kt)("inlineCode",{parentName:"p"},"Map")," \ub370\uc774\ud130 \uad6c\uc870\ub294 ",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-Map-Strict.html#v:fromList"},(0,r.kt)("inlineCode",{parentName:"a"},"fromList"))," \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud29c\ud50c\uc758 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. - \ud29c\ud50c\uc758 \uccab \ubc88\uc9f8 \uac12\uc740 \ud0a4\uc774\uace0 \ub450 \ubc88\uc9f8 \uac12\uc740 \uac12\uc785\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},'ghci> import qualified Data.Map as M -- \ucee8\ud14c\uc774\ub108 \ud328\ud0a4\uc9c0\uc5d0\uc11c \uac00\uc838\uc635\ub2c8\ub2e4.\n\nghci> file1 = ("output/file1.html", "input/file1.txt")\nghci> file2 = ("output/file2.html", "input/file2.txt")\nghci> file3 = ("output/file3.html", "input/file3.txt")\nghci> files = M.fromList [file1, file2, file3]\nghci> :t files :: M.Map FilePath FilePath -- FilePath\ub294 String\uc758 \ubcc4\uce6d\uc785\ub2c8\ub2e4.\nfiles :: M.Map FilePath FilePath :: M.Map FilePath FilePath\n\nghci> readFiles = traverse readFile\nghci> :t readFiles\nreadFiles :: Traversable t => t FilePath -> IO (t String)\n\nghci> readFiles files\nfromList [("output/file1.html","I\'m the content of file1.txt\\n"),("output/file2.html","I\'m the content of file2.txt\\n"),("output/file3.html","I\'m the content of file3.txt\\n")]\nghci> :t readFiles files\nreadFiles files :: IO (Map String String)\n')),(0,r.kt)("p",null,"\uc704 \ucf54\ub4dc\uc5d0\uc11c ",(0,r.kt)("inlineCode",{parentName:"p"},"readFiles"),"\ub77c\ub294 \ud568\uc218\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.\n\uc774 \ud568\uc218\ub294 ",(0,r.kt)("em",{parentName:"p"},"\ucd9c\ub825 \ud30c\uc77c \uacbd\ub85c"),"\ub97c ",(0,r.kt)("em",{parentName:"p"},"\uc785\ub825 \ud30c\uc77c \uacbd\ub85c"),"\ub85c \ub9e4\ud551\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.\n\uadf8\ub9ac\uace0 \uc785\ub825 \ud30c\uc77c\uc744 \uc77d\uc5b4\uc11c \uadf8 \ub0b4\uc6a9\uc744 \ub9f5\uc5d0 \ubc14\ub85c \uc4f0\ub294 IO \uc5f0\uc0b0\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4!\n\ub098\uc911\uc5d0 \uc720\uc6a9\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4."),(0,r.kt)("h2",{id:"\uc5d0\ub7ec\uac00-\uc5ec\ub7ec-\uac1c\uc778-\uacbd\uc6b0"},"\uc5d0\ub7ec\uac00 \uc5ec\ub7ec \uac1c\uc778 \uacbd\uc6b0"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"\uc758 kind\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"* -> * -> *"),"(\ub450 \uac1c\uc758 \ud0c0\uc785 \ud30c\ub77c\ubbf8\ud130\ub97c \ubc1b\uc2b5\ub2c8\ub2e4)\uc774\uae30 \ub54c\ubb38\uc5d0 ",(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"Functor"),"\ub098 ",(0,r.kt)("inlineCode",{parentName:"p"},"Applicative"),"\uc758 \uc778\uc2a4\ud134\uc2a4\uac00 \ub420 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\n\uc774\ub7ec\ud55c \ud0c0\uc785 \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\ub294 kind\uac00 ",(0,r.kt)("inlineCode",{parentName:"p"},"* -> *"),"\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n\ub2e4\uc74c \ud0c0\uc785 \ud074\ub798\uc2a4 \ud568\uc218 \uc2dc\uadf8\ub2c8\ucc98\ub97c \uc0b4\ud3b4\ubcf4\uba74:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"fmap :: Functor f => (a -> b) -> f a -> f b\n")),(0,r.kt)("p",null,"\uadf8\ub9ac\uace0 \ud2b9\uc815\ud55c \ud0c0\uc785\uc5d0 \ub300\ud574 \uc774\ub97c \uad6c\ud604\ud558\uace0 \uc2f6\ub2e4\uba74(",(0,r.kt)("inlineCode",{parentName:"p"},"f"),"\uc758 \uc790\ub9ac\uc5d0), ",(0,r.kt)("inlineCode",{parentName:"p"},"f"),"\ub97c \ub300\uc0c1 \ud0c0\uc785\uc73c\ub85c ",(0,r.kt)("em",{parentName:"p"},"\uce58\ud658"),"\ud560 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n",(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"\ub97c \uc0ac\uc6a9\ud558\ub824\uace0 \ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \uc2dc\uadf8\ub2c8\ucc98\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"fmap :: (a -> b) -> Either a -> Either b\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Either a"),"\uc640 ",(0,r.kt)("inlineCode",{parentName:"p"},"Either b"),"\ub294 \ub458 \ub2e4 ",(0,r.kt)("em",{parentName:"p"},"\uad6c\uccb4\ud654\ub41c \ud0c0\uc785"),"\uc774 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 \uc774\ub294 \ud0c0\uc785 \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.\n\uac19\uc740 \uc774\uc720\ub85c ",(0,r.kt)("inlineCode",{parentName:"p"},"f"),"\ub97c ",(0,r.kt)("inlineCode",{parentName:"p"},"Int"),"\ub85c \uce58\ud658\ud558\ub824\uace0 \ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \uc2dc\uadf8\ub2c8\ucc98\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"fmap :: (a -> b) -> Int a -> Int b\n")),(0,r.kt)("p",null,"\uc774 \ub610\ud55c \ud0c0\uc785 \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc9c0\ub9cc, ",(0,r.kt)("inlineCode",{parentName:"p"},"Either e"),"\uc758 kind\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"* -> *"),"\uc774\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ub2e4\uc74c \uc2dc\uadf8\ub2c8\ucc98\uc5d0\uc11c ",(0,r.kt)("inlineCode",{parentName:"p"},"f"),"\ub97c ",(0,r.kt)("inlineCode",{parentName:"p"},"Either e"),"\ub85c \uce58\ud658\ud574\ubd05\uc2dc\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"liftA2 :: Applicative => (a -> b -> c) -> f a -> f b -> f c\n")),(0,r.kt)("p",null,"\ub2e4\uc74c\uacfc \uac19\uc740 \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"liftA2 :: (a -> b -> c) -> Either e a -> Either e b -> Either e c\n")),(0,r.kt)("p",null,"\uc774\ub97c \ud1b5\ud574 \uc54c \uc218 \uc788\ub294 \uac83\uc740 ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"Left")," \uc0dd\uc131\uc790\uc758 \ud0c0\uc785\uc774 \uac19\uc740 \ub450 \uac1c\uc758 ",(0,r.kt)("inlineCode",{parentName:"em"},"Either"),"\ub97c \uacb0\ud569\ud560 \ub54c\ub9cc applicative \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\ub294 \uac83"),"\uc785\ub2c8\ub2e4."),(0,r.kt)("p",null,"\uadf8\ub807\ub2e4\uba74 \ub450 \uac1c\uc758 ",(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"\ub97c \uacb0\ud569\ud560 \ub54c ",(0,r.kt)("inlineCode",{parentName:"p"},"Left")," \uc0dd\uc131\uc790\uc758 \ud0c0\uc785\uc774 \ub2e4\ub974\ub2e4\uba74 \uc5b4\ub5bb\uac8c \ud574\uc57c \ud560\uae4c\uc694?\n\uba87 \uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc9c0\ub9cc \uac00\uc7a5 \uc801\ubc95\ud55c \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\uac19\uc740 \uc5d0\ub7ec \ud0c0\uc785\uc744 \ubc18\ud658\ud558\ub3c4\ub85d \ub9cc\ub4ed\ub2c8\ub2e4. \ubaa8\ub4e0 \uc5d0\ub7ec\ub97c \ud558\ub098\uc758 \ud0c0\uc785\uc73c\ub85c \ud1b5\ud569\ud558\ub294 ADT\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n\uc774\ub294 \uc77c\ubd80 \uacbd\uc6b0\uc5d0\ub294 \uc791\ub3d9\ud558\uc9c0\ub9cc \ud56d\uc0c1 \uc774\uc0c1\uc801\uc778 \uac83\uc740 \uc544\ub2d9\ub2c8\ub2e4.\n\uc608\ub97c \ub4e4\uc5b4 ",(0,r.kt)("inlineCode",{parentName:"li"},"parseDigit"),"\uc758 \uc785\ub825\uc774 \ube48 \ubb38\uc790\uc5f4\uc77c \uc218 \uc788\ub294 \uacbd\uc6b0\ub97c \uc0ac\uc6a9\uc790\uac00 \uc9c1\uc811 \ucc98\ub9ac\ud558\uac8c \ub9cc\ub4e4\uc5b4\uc11c\ub294 \uc548 \ub429\ub2c8\ub2e4."),(0,r.kt)("li",{parentName:"ol"},"\uac01 \ud0c0\uc785\uc5d0 \ub300\ud574 \ud2b9\uc218\ud55c \uc5d0\ub7ec \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\ub4e4\uc744 \uacb0\ud569\ud560 \ub54c\ub294 \uc77c\ubc18\uc801\uc778 \uc5d0\ub7ec \ud0c0\uc785\uc73c\ub85c \ub9e4\ud551\ud569\ub2c8\ub2e4.\n\uc774\ub294 ",(0,r.kt)("a",{parentName:"li",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Data-Bifunctor.html#v:first"},(0,r.kt)("inlineCode",{parentName:"a"},"first"))," \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n",(0,r.kt)("inlineCode",{parentName:"li"},"first")," \ud568\uc218\ub294 ",(0,r.kt)("inlineCode",{parentName:"li"},"Bifunctor")," \ud0c0\uc785 \ud074\ub798\uc2a4\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.")),(0,r.kt)("h2",{id:"\ubaa8\ub098\ub515-\uc778\ud130\ud398\uc774\uc2a4"},"\ubaa8\ub098\ub515 \uc778\ud130\ud398\uc774\uc2a4"),(0,r.kt)("p",null,"Applicative \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud558\uba74 \uc5ec\ub7ec \uac1c\uc758 ",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," \uac12(\ub610\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"IO"),"\ub098 ",(0,r.kt)("inlineCode",{parentName:"p"},"Parser"),"\uc640 \uac19\uc740 \ub2e4\ub978 applicative functor \uc778\uc2a4\ud134\uc2a4)\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\uac8c \ud568\uc218\ub97c \ub04c\uc5b4\uc62c\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ud558\uc9c0\ub9cc \ub354 \uc790\uc8fc \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc740 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \ud55c \uacc4\uc0b0\uacb0\uacfc\ub97c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \ub2e4\ub978 \uacc4\uc0b0\uc5d0 \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4."),(0,r.kt)("p",null,"\uc608\ub97c \ub4e4\uc5b4, \ucef4\ud30c\uc77c\ub7ec\ub294 \uc5b4\ud718 \ubd84\uc11d, \ud30c\uc2f1, \ud0c0\uc785 \uccb4\ud06c, \ucf54\ub4dc \uc0dd\uc131 \ub4f1\uc758 \ub2e8\uacc4\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4.\n\uac01 \ub2e8\uacc4\ub294 \uc774\uc804 \ub2e8\uacc4\uc758 \ucd9c\ub825\uc5d0 \uc758\uc874\ud558\uba70, \uac01 \ub2e8\uacc4\ub294 \uc2e4\ud328\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uac01 \ub2e8\uacc4\uc5d0 \ub300\ud55c \ud568\uc218\uc758 \ud0c0\uc785\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"tokenize :: String -> Either Error [Token]\n\nparse :: [Token] -> Either Error AST\n\ntypecheck :: AST -> Either Error TypedAST\n")),(0,r.kt)("p",null,"\uc774\ub7ec\ud55c \ud568\uc218\ub97c \ud569\uc131\ud574 \uccb4\uc778\uc73c\ub85c \uc791\ub3d9\ud558\ub3c4\ub85d \ub9cc\ub4e4\ub824\uace0 \ud569\ub2c8\ub2e4.\n\uc989 ",(0,r.kt)("inlineCode",{parentName:"p"},"tokenize"),"\uc758 \ucd9c\ub825\uc740 ",(0,r.kt)("inlineCode",{parentName:"p"},"parse"),"\ub85c, ",(0,r.kt)("inlineCode",{parentName:"p"},"parse"),"\uc758 \ucd9c\ub825\uc740 ",(0,r.kt)("inlineCode",{parentName:"p"},"typecheck"),"\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4."),(0,r.kt)("p",null,"\uc6b0\ub9ac\ub294 \ud2b9\uc815 \ud568\uc218\ub97c ",(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"\uc5d0 \ub300\ud574 \ub3d9\uc791\ud558\uac8c \ub04c\uc5b4\uc62c\ub9ac\ub294 \ubc29\ubc95\uc744 \uc774\ubbf8 \uc54c\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n",(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218 \ub610\ud55c \ub04c\uc5b4\uc62c\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"-- fmap \ud0c0\uc785\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4\nfmap :: Functor f => (a -> b) -> f a -> f b\n-- `Either Error`\ub85c \uce58\ud658\ud558\uba74\nfmap :: (a -> b) -> Either Error a -> Either Error b\n\n-- \uc5ec\uae30\uc11c `a`\ub294 [Token]\uc774\uace0 `b`\ub294 `Either Error AST`\uc785\ub2c8\ub2e4:\n\n> fmap parse (tokenize string) :: Either Error (Either Error AST)\n")),(0,r.kt)("p",null,"\uc704 \ucf54\ub4dc\ub294 \ucef4\ud30c\uc77c\uc5d0 \uc131\uacf5\ud558\uc9c0\ub9cc, \ud6cc\ub96d\ud558\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4.\n\uc65c\ub0d0\ud558\uba74 \uc6b0\ub9ac\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"Either Error"),"\uc758 \uacc4\uce35\uc744 \ub9cc\ub4e4\uace0 \uc788\uace0 ",(0,r.kt)("inlineCode",{parentName:"p"},"typecheck"),"\uc5d0\uc11c \uc774 \ud2b8\ub9ad\uc744 \ub2e4\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4!\n",(0,r.kt)("inlineCode",{parentName:"p"},"typecheck"),"\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"AST"),"\ub97c \uae30\ub300\ud558\uc9c0\ub9cc ",(0,r.kt)("inlineCode",{parentName:"p"},"fmap parse (tokenize string)"),"\uc5d0 \ub300\ud574 fmap\uc744 \uc2dc\ub3c4\ud558\uba74 ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),"\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"Either Error AST"),"\uac00 \ub429\ub2c8\ub2e4."),(0,r.kt)("p",null,"\uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 \uac83\uc740 \uc774\ub7ec\ud55c \uacc4\uce35\uc744 \uc911\ucca9\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ud3bc\uce58\ub294 \uac83\uc785\ub2c8\ub2e4.\n",(0,r.kt)("inlineCode",{parentName:"p"},"Either Error (Either Error AST)"),"\uc758 \uac12\uc774 \uac00\uc9c8 \uc218 \uc788\ub294 \uc885\ub958\ub97c \uc0b4\ud3b4\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Left <error>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Right (Left error)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Right (Right <ast>)"))),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\uc5f0\uc2b5\ubb38\uc81c"),": \uc704 \ud0c0\uc785\uc5d0 \ub300\ud574 \ud328\ud134\ub9e4\uce6d\uc744 \uc218\ud589\ud558\uba74 \uc5b4\ub5a0\ud55c \ucf54\ub4dc\uac00 \ub098\uc62c\uae4c\uc694?"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\uc815\ub2f5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"case tokenize string of\n  Left err ->\n    Left err\n  Right tokens ->\n    case parse tokens of\n      Left err ->\n        Left err\n      Right ast ->\n        typecheck ast\n")),(0,r.kt)("p",null,"\uac01 \ub2e8\uacc4\uc5d0\uc11c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uba74 \uc5d0\ub7ec\ub97c \ubc18\ud658\ud558\uace0 \uc911\ub2e8\ud569\ub2c8\ub2e4.\n\uc131\uacf5\ud558\uba74 \ub2e4\uc74c \ub2e8\uacc4\uc5d0 \ub300\ud55c \uc785\ub825\uc73c\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"\uc774\ub7ec\ud55c ",(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"\uc758 \uc911\ucca9\uc744 \ud3bc\uce58\ub294 \uacfc\uc815\uc740 \ub9c8\uc9c0\ub9c9 \ub2e8\uacc4\uc778 ",(0,r.kt)("inlineCode",{parentName:"p"},"Right tokens"),"\uc77c \ub54c\ub3c4 \ub3d9\uc77c\ud558\uac8c \uc218\ud589\ub429\ub2c8\ub2e4."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"flatten :: Either e (Either e a) -> Either e a\nflatten e =\n  case e of\n    Left l -> Left l\n    Right x -> x\n")),(0,r.kt)("p",null,"\uc704\uc640 \uac19\uc740 \ud568\uc218\ub97c \ub9cc\ub4e4\uc5c8\ub2e4\uba74, ",(0,r.kt)("inlineCode",{parentName:"p"},"fmap parse (tokenize string) :: Either Error (Either Error AST)"),"\n\uc758 \uacb0\uacfc\uc5d0 \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"> flatten (fmap parse (tokenize string)) :: Either Error AST\n")),(0,r.kt)("p",null,"\uc774\uc81c ",(0,r.kt)("inlineCode",{parentName:"p"},"typecheck"),"\uc640 \ud569\uc131\ud558\uae30 \uc704\ud574 \ub2e4\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"> flatten (fmap typecheck (flatten (fmap parse (tokenize string)))) :: Either Error TypedAST\n")),(0,r.kt)("p",null,"\uc774\ub7ec\ud55c ",(0,r.kt)("inlineCode",{parentName:"p"},"flatten")," + `fmap' \uc870\ud569\uc740 \ubc18\ubcf5\ub418\ub294 \ud328\ud134\uc774\uae30\uc5d0, \uc774\ub97c \ud568\uc218\ub85c \uacb0\ud569\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"flatMap :: (a -> Either e b) -> Either a -> Either b\nflatMap func val = flatten (fmap func val)\n")),(0,r.kt)("p",null,"\uc774\uc81c \ucf54\ub4dc\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"> flatMap typecheck (flatMap parse (tokenize string)) :: Either Error TypedAST\n\n-- \ub610\ub294 \ud568\uc218\ub97c \uc911\uc704 \ud45c\uae30\ubc95\uc73c\ub85c \ubcc0\ud658\ud558\uae30 \uc704\ud574 backtick\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4:\n> typecheck `flatMap` parse `flatMap` tokenize string\n\n-- \ub610\ub294 custom infix operator\ub97c \ub9cc\ub4ed\ub2c8\ub2e4: (=<<) = flatMap\n> typeCheck =<< parse =<< tokenize string\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"flatten")," (\uadf8\ub9ac\uace0 ",(0,r.kt)("inlineCode",{parentName:"p"},"flatMap"),") \ud568\uc218\ub294 \ud558\uc2a4\ucf08\uc5d0\uc11c\ub294 \ub2e4\ub978 \uc774\ub984\uc73c\ub85c \uc0ac\uc6a9\ub418\uba70,\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Control-Monad.html#v:join"},(0,r.kt)("inlineCode",{parentName:"a"},"join")),"\n\uacfc ",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Control-Monad.html#v:-61--60--60-"},(0,r.kt)("inlineCode",{parentName:"a"},"=<<")),'("reverse bind"\ub85c \ubc1c\uc74c)\n\ub85c \ubd88\ub9bd\ub2c8\ub2e4.\n\uc774\ub4e4\uc740 \ud558\uc2a4\ucf08\uc5d0\uc11c \ub610 \ub2e4\ub978 \ub9e4\uc6b0 \uc720\uc6a9\ud55c \ucd94\uc0c1\ud654\uc758 \ud575\uc2ec\uc785\ub2c8\ub2e4.'),(0,r.kt)("p",null,"\ub2e4\uc74c\uacfc \uac19\uc740 \ud56d\ubaa9\uc744 \uad6c\ud604\ud55c \ud0c0\uc785\uc774 \uc788\ub2e4\uba74:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Functor")," \uc778\ud130\ud398\uc774\uc2a4, \ud2b9\ud788 ",(0,r.kt)("inlineCode",{parentName:"li"},"fmap")," \ud568\uc218"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Applicative")," \uc778\ud130\ud398\uc774\uc2a4, \ud2b9\ud788 ",(0,r.kt)("inlineCode",{parentName:"li"},"pure")," \ud568\uc218"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"join")," \ud568\uc218")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Monad")," \ud0c0\uc785 \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\ub97c \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("p",null,'Functor\ub97c \ud1b5\ud574 \uc6b0\ub9ac\ub294 \ud568\uc218\ub97c "\ub04c\uc5b4\uc62c\ub824" functor \ud0c0\uc785 \ud074\ub798\uc2a4\ub97c \uad6c\ud604\ud558\ub294 \ud0c0\uc785 \uc704\uc5d0\uc11c \uc791\ub3d9\ud558\ub3c4\ub85d \ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"fmap :: (a -> b) -> f a -> f b\n")),(0,r.kt)("p",null,"Applicative functors\ub97c \ud1b5\ud574 \uc6b0\ub9ac\ub294 applicative functor \ud0c0\uc785 \ud074\ub798\uc2a4\ub97c \uad6c\ud604\ud55c \ud0c0\uc785\uc744 \uac00\uc9c4 \uc5ec\ub7ec \uc778\uc790\ub4e4\uc744 \uac00\uc9c4 \ud568\uc218\ub97c \ub04c\uc5b4\uc62c\ub9b4 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.\n\ub610\ud55c \ud574\ub2f9 \ud0c0\uc785\uc73c\ub85c \uc5b4\ub5a0\ud55c \uac12\uc744 \ub04c\uc5b4\uc62c\ub9b4 \uc218\ub3c4 \uc788\uc5c8\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"pure :: a -> f a\n\nliftA2 :: (a -> b -> c) -> f a -> f b -> f c\n")),(0,r.kt)("p",null,"\uc774\uc81c Monad\ub97c \ud1b5\ud574 \uc6b0\ub9ac\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"Monad"),' \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud55c \ud0c0\uc785\ub4e4\uc744 \ud3bc\uce60 \uc218 (\ub610\ub294 \ud558\uc2a4\ucf08 \uc6a9\uc5b4\ub85c "join"\ud560 \uc218) \uc788\uc2b5\ub2c8\ub2e4.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},'join :: m (m a) -> m a\n\n-- =<< \uc758 \uc778\uc790\ub97c \ubc18\ub300\ub85c \ub4a4\uc9d1\uc740 \uac83\uc785\ub2c8\ub2e4. "bind"\ub85c \ubc1c\uc74c\ud569\ub2c8\ub2e4.\n(>>=) :: m a -> (a -> m b) -> m b\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},">>="),"\ub97c \uc0ac\uc6a9\ud558\uba74 \uc608\uc81c\ub85c \uc18c\uac1c\ud55c \ucef4\ud30c\uc77c \ud30c\uc774\ud504\ub77c\uc778\uc744 \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nmonad\uc5d0 \ub300\ud574\uc11c\ub294 \uc774 \ubc29\uc2dd\uc744 \ub354 \uc790\uc8fc \uc0ac\uc6a9\ud569\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"> tokenize string >>= parse >>= typecheck\n")),(0,r.kt)("p",null,"\uc0ac\uc2e4 \uc774 \ud568\uc218\ub294 \uc608\uc804\uc5d0 ",(0,r.kt)("inlineCode",{parentName:"p"},"IO"),"\uc5d0 \ub300\ud574 \uc18c\uac1c\ud560 \ub54c \uc774\ubbf8 \uc0ac\uc6a9\ud574 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n\ub9de\uc2b5\ub2c8\ub2e4. ",(0,r.kt)("inlineCode",{parentName:"p"},"IO")," \ub610\ud55c ",(0,r.kt)("inlineCode",{parentName:"p"},"Monad")," \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud569\ub2c8\ub2e4.\n",(0,r.kt)("inlineCode",{parentName:"p"},"IO"),"\uc758 \ubaa8\ub098\ub4dc \uc778\ud130\ud398\uc774\uc2a4\ub294 \ud6a8\uacfc\uc758 \uc21c\uc11c\ub97c \uad6c\uc131\ud558\ub294 \ub370 \ub3c4\uc6c0\uc774 \ub429\ub2c8\ub2e4."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Monad")," \uc778\ud130\ud398\uc774\uc2a4\uc758 \ud575\uc2ec\uc740 ",(0,r.kt)("inlineCode",{parentName:"p"},"join"),"/",(0,r.kt)("inlineCode",{parentName:"p"},">>=")," \ud568\uc218\uc774\uba70, \uc6b0\ub9ac\uac00 ",(0,r.kt)("inlineCode",{parentName:"p"},">>="),"\ub97c ",(0,r.kt)("inlineCode",{parentName:"p"},"join"),"\uc73c\ub85c \uad6c\ud604\ud560 \uc218 \uc788\uc5c8\ub4ef\uc774,\n",(0,r.kt)("inlineCode",{parentName:"p"},"join"),"\uc744 ",(0,r.kt)("inlineCode",{parentName:"p"},">>="),"\ub85c \uad6c\ud604\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4 (\ud55c \ubc88 \uc2dc\ub3c4\ud574 \ubcf4\uc138\uc694!)."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Monad")," \uc778\ud130\ud398\uc774\uc2a4\ub294 \ud0c0\uc785\uc5d0 \ub530\ub77c \uac01\uac01 \ub2e4\ub978 \uc758\ubbf8\ub97c \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n",(0,r.kt)("inlineCode",{parentName:"p"},"IO"),"\uc758 \uacbd\uc6b0 \ud6a8\uacfc\uc758 \uc21c\uc11c\ub97c \uc758\ubbf8\ud558\uace0, ",(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"\uc758 \uacbd\uc6b0 \uc870\uae30 \uc885\ub8cc\ub97c \uc758\ubbf8\ud558\uba70,\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/logict-0.7.1.0"},(0,r.kt)("inlineCode",{parentName:"a"},"Logic")),"\uc5d0 \ub300\ud574\uc11c\ub294 backtracking \uacc4\uc0b0\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4."),(0,r.kt)("p",null,"\ub2e4\uc2dc \ub9d0\ud558\uc9c0\ub9cc, \uc774\ub860\uacfc \ube44\uc720\uc5d0 \uc2e0\uacbd\uc4f0\uc9c0 \ub9d0\uace0, API\uc640 ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.haskell.org/Monad_laws"},"\ubc95\uce59"),"\uc5d0 \uc9d1\uc911\ud558\uc138\uc694."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud639\uc2dc Monad \ubc95\uce59\uc744 \ud655\uc778\ud574 \ubcf4\uc168\ub098\uc694? \uc67c\ucabd \ud56d\ub4f1, \uc624\ub978\ucabd \ud56d\ub4f1, \uacb0\ud569\uc131\uc5d0 \ub300\ud55c \ub0b4\uc6a9\uc785\ub2c8\ub2e4.\n\uc6b0\ub9ac\ub294 \uc774\ubbf8 \uc774\ub7ec\ud55c \ubc95\uce59\uc744 \uac00\uc9c4 \ud0c0\uc785 \ud074\ub798\uc2a4\uc5d0 \ub300\ud574 \ub17c\uc758\ud588\uc2b5\ub2c8\ub2e4.\n\ubc14\ub85c ",(0,r.kt)("inlineCode",{parentName:"p"},"Monoid")," \ud0c0\uc785 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4.\n\uc544\ub9c8\ub3c4 \uc774\uac83\uc774 \uc720\uba85\ud55c \uba85\uc5b8\uacfc \uad00\ub828\uc774 \uc788\uc744\uc9c0\ub3c4 \ubaa8\ub985\ub2c8\ub2e4. - monad is just a monoid in the category of endofunctors.")),(0,r.kt)("h3",{id:"do-\ud45c\uae30\ubc95"},"Do \ud45c\uae30\ubc95"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/learn-haskell-blog-generator/glue/io#do-%ED%91%9C%EA%B8%B0%EB%B2%95"},"do \ud45c\uae30\ubc95"),"\uc744 \uae30\uc5b5\ud558\uc2dc\ub098\uc694?\n\uc774\ub294 ",(0,r.kt)("inlineCode",{parentName:"p"},"Monad"),"\uc758 \uc778\uc2a4\ud134\uc2a4\uc778 \ubaa8\ub4e0 \ud0c0\uc785\uc5d0 \ub300\ud574 \ub3d9\uc791\ud569\ub2c8\ub2e4.\n\ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub97c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"pipeline :: String -> Either Error TypedAST\npipeline string =\n  tokenize string >>= \\tokens ->\n    parse tokens >>= \\ast ->\n      typecheck ast\n")),(0,r.kt)("p",null,"\uc544\ub798\uc640 \uac19\uc774 \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"pipeline :: String -> Either Error TypedAST\npipeline string = do\n  tokens <- tokenize string\n  ast <- parse tokens\n  typecheck ast\n")),(0,r.kt)("p",null,"\ub610\ud55c ",(0,r.kt)("inlineCode",{parentName:"p"},"tokenize string >>= parse >>= typecheck"),"\uc640 \uac19\uc774 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uc5d0\ub294\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Control-Monad.html#v:-62--61--62-"},">=>"),"\n\ub610\ub294\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Control-Monad.html#v:-60--61--60-"},"<=<"),"\n\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub354 \uac04\uacb0\ud558\uac8c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"(>=>) :: Monad m => (a -> m b) -> (b -> m c) -> a -> m c\n(<=<) :: Monad m => (b -> m c) -> (a -> m b) -> a -> m c\n\n-- \ud568\uc218 \ud569\uc131\uacfc \ube44\uad50\ud574 \ubcf4\uc138\uc694:\n(.) ::              (b ->   c) -> (a ->   b) -> a ->   c\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"pipeline  = tokenize >=> parse >=> typecheck\n")),(0,r.kt)("p",null,"\ub610\ub294"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"pipeline = typecheck <=< parse <=< tokenize\n")),(0,r.kt)("p",null,"\ucd94\uc0c1\ud654\ub97c \ud1b5\ud574 \uac04\uacb0\ud55c \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\ub294 \ud558\uc2a4\ucf08\uc758 \ub2a5\ub825\uc740\n\ucd94\uc0c1\ud654\uc5d0 \uc775\uc219\ud574\uc9c0\uba74 \ub354\uc6b1 \ub354 \uc88b\uc544\uc9d1\ub2c8\ub2e4.\nMonad \ucd94\uc0c1\ud654\uc5d0 \ub300\ud574 \uc54c\uac8c \ub418\uba74, \uc774\ubbf8 \ub9ce\uc740 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc774 \uc0ac\uc6a9\ud558\ub294 \ud575\uc2ec \uc870\ud569 API\ub97c \ube60\ub974\uac8c \uc775\ud790 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc608\ub97c \ub4e4\uba74:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://hackage.haskell.org/package/stm"},"\ub3d9\uc2dc\uc131"),"\uacfc ",(0,r.kt)("a",{parentName:"li",href:"https://hackage.haskell.org/package/async"},"\ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gilmi.me/blog/post/2020/12/05/scotty-bulletin-board"},"\uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://hspec.github.io/"},"\ud14c\uc2a4\ud305")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://hackage.haskell.org/package/mtl-2.3.1/docs/Control-Monad-State-Lazy.html#g:2"},"\uc0c1\ud0dc \uacc4\uc0b0 \ubaa8\ud615")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://hackage.haskell.org/package/mtl-2.3.1/docs/Control-Monad-Reader.html#g:2"},"\uacc4\uc0b0\uac04\uc758 \ud658\uacbd\uc744 \uacf5\uc720")),(0,r.kt)("li",{parentName:"ul"},"\uadf8 \uc678")),(0,r.kt)("h2",{id:"\uc694\uc57d"},"\uc694\uc57d"),(0,r.kt)("p",null,"\uc5d0\ub7ec \ucc98\ub9ac\ub97c \uc704\ud574 ",(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"\ub97c \uc0ac\uc6a9\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \uc774\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\ud0c0\uc785\uc744 \ud1b5\ud574 \uc5d0\ub7ec\ub97c \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc0ac\uc6a9\uc790\uac00 \uc774\ub7ec\ud55c ",(0,r.kt)("strong",{parentName:"li"},"\uc5d0\ub7ec\ub97c \ucc98\ub9ac\ud558\ub3c4\ub85d \uac15\uc81c"),"\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774\ub97c \ud1b5\ud574 \ucf54\ub4dc\ub294 \ub354\uc6b1 \uacac\uace0\ud574\uc9c0\uace0, \uc798\ubabb\ub41c \ub3d9\uc791\uc744 \ubc29\uc9c0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Functor"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Applicative"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Monad")," \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \uc2e4\ud328\ud560 \uc218 \uc788\ub294 \ud568\uc218\ub97c ",(0,r.kt)("strong",{parentName:"li"},"\uc870\ud569"),"\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774\ub97c \ud1b5\ud574 \ubcf4\uc77c\ub7ec \ud50c\ub808\uc774\ud2b8\ub97c \uc904\uc774\uace0, \ucf54\ub4dc\uc5d0 \ub300\ud55c \uac15\ub825\ud55c \ubcf4\uc7a5\uc744 \uc720\uc9c0\ud558\uba70, \uc5d0\ub7ec\ub97c \ucc98\ub9ac\ud558\ub294 \uc2dc\uc810\uc744 \ubbf8\ub8f0 \uc218 \uc788\uc2b5\ub2c8\ub2e4.")))}h.isMDXComponent=!0}}]);