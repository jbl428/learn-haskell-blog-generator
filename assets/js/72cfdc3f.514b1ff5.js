"use strict";(self.webpackChunklearn_haskell_blog_generator=self.webpackChunklearn_haskell_blog_generator||[]).push([[684],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3328:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={},i="Summary",l={unversionedId:"errors_and_files/summary",id:"errors_and_files/summary",title:"Summary",description:"This was quite a section. Let's recount the things we've learned.",source:"@site/docs/06-errors_and_files/05-summary.md",sourceDirName:"06-errors_and_files",slug:"/errors_and_files/summary",permalink:"/learn-haskell-blog-generator/errors_and_files/summary",draft:!1,editUrl:"https://github.com/jbl428/learn-haskell-blog-generator/tree/book/docs/06-errors_and_files/05-summary.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ucf54\ub4dc\ub97c \uc791\uc131\ud574\ubd05\uc2dc\ub2e4!",permalink:"/learn-haskell-blog-generator/errors_and_files/implementation"},next:{title:"Passing environment variables",permalink:"/learn-haskell-blog-generator/environment"}},s={},p=[],c={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"summary"},"Summary"),(0,a.kt)("p",null,"This was quite a section. Let's recount the things we've learned."),(0,a.kt)("p",null,"We discussed several ways to handle errors in Haskell:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Encoding errors as a data type and using the ",(0,a.kt)("inlineCode",{parentName:"li"},"Either"),' type to encode "a value or an error".\nUseful approach for uneffectful code'),(0,a.kt)("li",{parentName:"ol"},"Using ",(0,a.kt)("inlineCode",{parentName:"li"},"ExceptT")," when we want to combine the approach in (1) on top on an existing\ntype with monadic capabilities"),(0,a.kt)("li",{parentName:"ol"},"Using exceptions for IO code")),(0,a.kt)("p",null,"We've also learned a few new abstractions and techniques:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"Traversable")," type class, for data structures that can be traversed from left to right\nsuch as linked lists, binary trees and ",(0,a.kt)("inlineCode",{parentName:"li"},"Map"),"s.\nPretty useful when combined with another applicative functor type like ",(0,a.kt)("inlineCode",{parentName:"li"},"Either")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"IO")),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"Monad")," type class extends the ",(0,a.kt)("inlineCode",{parentName:"li"},"Applicative")," type class with the ",(0,a.kt)("inlineCode",{parentName:"li"},"join :: m (m a) -> m a"),"\nfunction. We learned that ",(0,a.kt)("inlineCode",{parentName:"li"},"Either")," implements this type class interface and so does ",(0,a.kt)("inlineCode",{parentName:"li"},"IO")),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"MonadTrans")," type class for ",(0,a.kt)("em",{parentName:"li"},"monad transformers")," for types that take other monads as inputs\nand provide a monadic interface (",(0,a.kt)("inlineCode",{parentName:"li"},">>="),", do notation, etc.) while combining both their capabilities.\nWe saw how to stack an ",(0,a.kt)("inlineCode",{parentName:"li"},"Either"),"-like monad transformer, ",(0,a.kt)("inlineCode",{parentName:"li"},"ExceptT"),", on top of ",(0,a.kt)("inlineCode",{parentName:"li"},"IO"))),(0,a.kt)("p",null,"We are almost done. Only a couple more things left to do with this project. Let's go!"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"You can view the git commit of\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/soupi/learn-haskell-blog-generator/commit/a08d148d981fa00cb7025f1b651d7b75084dd1ae"},"the changes we've made"),"\nand the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/soupi/learn-haskell-blog-generator/tree/a08d148d981fa00cb7025f1b651d7b75084dd1ae"},"code up until now"),".")))}d.isMDXComponent=!0}}]);