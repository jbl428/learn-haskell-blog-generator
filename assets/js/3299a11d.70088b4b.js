"use strict";(self.webpackChunklearn_haskell_blog_generator=self.webpackChunklearn_haskell_blog_generator||[]).push([[794],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},s="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=c(r),m=o,f=s["".concat(u,".").concat(m)]||s[m]||g[m]||l;return r?n.createElement(f,a(a({ref:t},p),{},{components:r})):n.createElement(f,a({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[s]="string"==typeof e?e:o,a[1]=i;for(var c=2;c<l;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2144:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>g,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const l={},a="Gluing things together",i={unversionedId:"glue/index",id:"glue/index",title:"Gluing things together",description:"In this chapter we are going to glue the pieces that we built together",source:"@site/docs/05-glue/index.md",sourceDirName:"05-glue",slug:"/glue/",permalink:"/learn-haskell-blog-generator/glue/",draft:!1,editUrl:"https://github.com/jbl428/learn-haskell-blog-generator/tree/book/docs/05-glue/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Parsing markup part 02 (Pattern matching)",permalink:"/learn-haskell-blog-generator/markup/parsing-02"},next:{title:"Converting Markup to HTML",permalink:"/learn-haskell-blog-generator/glue/markup-to-html"}},u={},c=[],p={toc:c},s="wrapper";function g(e){let{components:t,...r}=e;return(0,o.kt)(s,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"gluing-things-together"},"Gluing things together"),(0,o.kt)("p",null,"In this chapter we are going to glue the pieces that we built together\nand build an actual blog generator. We will:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Read markup text from a file"),(0,o.kt)("li",{parentName:"ol"},"Parse the text to a ",(0,o.kt)("inlineCode",{parentName:"li"},"Document")),(0,o.kt)("li",{parentName:"ol"},"Convert the result to our ",(0,o.kt)("inlineCode",{parentName:"li"},"Html")," EDSL"),(0,o.kt)("li",{parentName:"ol"},"Generate HTML code"),(0,o.kt)("li",{parentName:"ol"},"Write it to file")),(0,o.kt)("p",null,"While doing so, we will learn:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"How to work with IO"),(0,o.kt)("li",{parentName:"ul"},"How to import external libraries to process whole directories and create a simple command-line interface")))}g.isMDXComponent=!0}}]);