"use strict";(self.webpackChunklearn_haskell_blog_generator=self.webpackChunklearn_haskell_blog_generator||[]).push([[839],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var l=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=l.createContext({}),s=function(e){var n=l.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return l.createElement(p.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},h=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(t),h=r,f=c["".concat(p,".").concat(h)]||c[h]||m[h]||a;return t?l.createElement(f,o(o({ref:n},u),{},{components:t})):l.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=h;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<a;s++)o[s]=t[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}h.displayName="MDXCreateElement"},8448:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var l=t(7462),r=(t(7294),t(3905));const a={},o="Custom markup language",i={unversionedId:"markup/index",id:"markup/index",title:"Custom markup language",description:"In this chapter we will define our own simple markup language",source:"@site/docs/04-markup/index.md",sourceDirName:"04-markup",slug:"/markup/",permalink:"/learn-haskell-blog-generator/markup/",draft:!1,editUrl:"https://github.com/jbl428/learn-haskell-blog-generator/tree/book/docs/04-markup/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\uc694\uc57d",permalink:"/learn-haskell-blog-generator/html/summary"},next:{title:"Representing the markup language as a Haskell data type",permalink:"/learn-haskell-blog-generator/markup/data-type"}},p={},s=[],u={toc:s},c="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,l.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-markup-language"},"Custom markup language"),(0,r.kt)("p",null,"In this chapter we will define our own simple markup language\nand parse documents written in this language into Haskell data structures."),(0,r.kt)("p",null,"Our markup language will contain the following features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Headings: prefix by a number of ",(0,r.kt)("inlineCode",{parentName:"li"},"*")," characters"),(0,r.kt)("li",{parentName:"ul"},"Paragraphs: a group of lines without empty lines in between"),(0,r.kt)("li",{parentName:"ul"},"Unordered lists: a group of lines each prefixed with ",(0,r.kt)("inlineCode",{parentName:"li"},"- ")),(0,r.kt)("li",{parentName:"ul"},"Ordered lists: a group of lines each prefixed with ",(0,r.kt)("inlineCode",{parentName:"li"},"# ")),(0,r.kt)("li",{parentName:"ul"},"Code blocks: a group of lines each prefixed with ",(0,r.kt)("inlineCode",{parentName:"li"},"> "))),(0,r.kt)("p",null,"Here's a sample document:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-org"},'* Compiling programs with ghc\n\nRunning ghc invokes the Glasgow Haskell Compiler (GHC),\nand can be used to compile Haskell modules and programs into native\nexecutables and libraries.\n\nCreate a new Haskell source file named hello.hs, and write\nthe following code in it:\n\n> main = putStrLn "Hello, Haskell!"\n\nNow, we can compile the program by invoking ghc with the file name:\n\n> \u279c ghc hello.hs\n> [1 of 1] Compiling Main             ( hello.hs, hello.o )\n> Linking hello ...\n\nGHC created the following files:\n\n- hello.hi - Haskell interface file\n- hello.o - Object file, the output of the compiler before linking\n- hello (or hello.exe on Microsoft Windows) - A native runnable executable.\n\nGHC will produce an executable when the source file satisfies both conditions:\n\n# Defines the main function in the source file\n# Defines the module name to be Main, or does not have a module declaration\n\nOtherwise, it will only produce the .o and .hi files.\n')),(0,r.kt)("p",null,"which we will, eventually, convert into this (modulo formatting) HTML:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<h1>Compiling programs with ghc</h1>\n\n<p>\n  Running ghc invokes the Glasgow Haskell Compiler (GHC), and can be used to\n  compile Haskell modules and programs into native executables and libraries.\n</p>\n\n<p>\n  Create a new Haskell source file named hello.hs, and write the following code\n  in it:\n</p>\n\n<pre>\nmain = putStrLn "Hello, Haskell!"\n</pre>\n\n<p>Now, we can compile the program by invoking ghc with the file name:</p>\n\n<pre>\n\u279c ghc hello.hs\n[1 of 1] Compiling Main             ( hello.hs, hello.o )\nLinking hello ...\n</pre>\n\n<p>GHC created the following files:</p>\n\n<ul>\n  <li>hello.hi - Haskell interface file</li>\n  <li>hello.o - Object file, the output of the compiler before linking</li>\n  <li>\n    hello (or hello.exe on Microsoft Windows) - A native runnable executable.\n  </li>\n</ul>\n\n<p>\n  GHC will produce an executable when the source file satisfies both conditions:\n</p>\n\n<ol>\n  <li>Defines the main function in the source file</li>\n  <li>\n    Defines the module name to be Main, or does not have a module declaration\n  </li>\n</ol>\n\n<p>Otherwise, it will only produce the .o and .hi files.</p>\n')))}m.isMDXComponent=!0}}]);