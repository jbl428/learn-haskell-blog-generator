"use strict";(self.webpackChunklearn_haskell_blog_generator=self.webpackChunklearn_haskell_blog_generator||[]).push([[2826],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var l=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},o=Object.keys(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=l.createContext({}),p=function(e){var n=l.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=p(e.components);return l.createElement(s.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},m=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(t),m=r,g=c["".concat(s,".").concat(m)]||c[m]||h[m]||o;return t?l.createElement(g,a(a({ref:n},u),{},{components:t})):l.createElement(g,a({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[c]="string"==typeof e?e:r,a[1]=i;for(var p=2;p<o;p++)a[p]=t[p];return l.createElement.apply(null,a)}return l.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1636:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var l=t(7462),r=(t(7294),t(3905));const o={},a="Custom markup language",i={unversionedId:"markup",id:"markup",title:"Custom markup language",description:"In this chapter we will define our own simple markup language",source:"@site/docs/04-markup.md",sourceDirName:".",slug:"/markup",permalink:"/learn-haskell-blog-generator/docs/markup",draft:!1,editUrl:"https://github.com/jbl428/learn-haskell-blog-generator/tree/book/docs/04-markup.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Parsing markup part 02 (Pattern matching)",permalink:"/learn-haskell-blog-generator/docs/markup/parsing_02"},next:{title:"Converting Markup to HTML",permalink:"/learn-haskell-blog-generator/docs/glue/markup_to_html"}},s={},p=[],u={toc:p},c="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,l.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-markup-language"},"Custom markup language"),(0,r.kt)("p",null,"In this chapter we will define our own simple markup language\nand parse documents written in this language into Haskell data structures."),(0,r.kt)("p",null,"Our markup language will contain the following features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Headings: prefix by a number of ",(0,r.kt)("inlineCode",{parentName:"li"},"*")," characters"),(0,r.kt)("li",{parentName:"ul"},"Paragraphs: a group of lines without empty lines in between"),(0,r.kt)("li",{parentName:"ul"},"Unordered lists: a group of lines each prefixed with ",(0,r.kt)("inlineCode",{parentName:"li"},"- ")),(0,r.kt)("li",{parentName:"ul"},"Ordered lists: a group of lines each prefixed with ",(0,r.kt)("inlineCode",{parentName:"li"},"# ")),(0,r.kt)("li",{parentName:"ul"},"Code blocks: a group of lines each prefixed with ",(0,r.kt)("inlineCode",{parentName:"li"},"> "))),(0,r.kt)("p",null,"Here's a sample document:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-org"},'* Compiling programs with ghc\n\nRunning ghc invokes the Glasgow Haskell Compiler (GHC),\nand can be used to compile Haskell modules and programs into native\nexecutables and libraries.\n\nCreate a new Haskell source file named hello.hs, and write\nthe following code in it:\n\n> main = putStrLn "Hello, Haskell!"\n\nNow, we can compile the program by invoking ghc with the file name:\n\n> \u279c ghc hello.hs\n> [1 of 1] Compiling Main             ( hello.hs, hello.o )\n> Linking hello ...\n\nGHC created the following files:\n\n- hello.hi - Haskell interface file\n- hello.o - Object file, the output of the compiler before linking\n- hello (or hello.exe on Microsoft Windows) - A native runnable executable.\n\nGHC will produce an executable when the source file satisfies both conditions:\n\n# Defines the main function in the source file\n# Defines the module name to be Main, or does not have a module declaration\n\nOtherwise, it will only produce the .o and .hi files.\n')),(0,r.kt)("p",null,"which we will, eventually, convert into this (modulo formatting) HTML:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<h1>Compiling programs with ghc</h1>\n\n<p>Running ghc invokes the Glasgow Haskell Compiler (GHC),\nand can be used to compile Haskell modules and programs into native\nexecutables and libraries.\n</p>\n\n<p>Create a new Haskell source file named hello.hs, and write\nthe following code in it:\n</p>\n\n<pre>main = putStrLn "Hello, Haskell!"\n</pre>\n\n<p>Now, we can compile the program by invoking ghc with the file name:</p>\n\n<pre>\n\u279c ghc hello.hs\n[1 of 1] Compiling Main             ( hello.hs, hello.o )\nLinking hello ...\n</pre>\n\n<p>GHC created the following files:\n</p>\n\n<ul>\n  <li>hello.hi - Haskell interface file</li>\n  <li>hello.o - Object file, the output of the compiler before linking</li>\n  <li>hello (or hello.exe on Microsoft Windows) - A native runnable executable.</li>\n</ul>\n\n<p>GHC will produce an executable when the source file satisfies both conditions:\n</p>\n\n<ol>\n  <li>Defines the main function in the source file</li>\n  <li>Defines the module name to be Main, or does not have a module declaration</li>\n</ol>\n\n<p>Otherwise, it will only produce the .o and .hi files.\n</p>\n')))}h.isMDXComponent=!0}}]);