"use strict";(self.webpackChunklearn_haskell_blog_generator=self.webpackChunklearn_haskell_blog_generator||[]).push([[934],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},h=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),c=s(n),k=r,u=c["".concat(p,".").concat(k)]||c[k]||m[k]||i;return n?a.createElement(u,l(l({ref:t},h),{},{components:n})):a.createElement(u,l({ref:t},h))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},4652:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={},l="Handling errors with Either",o={unversionedId:"errors_and_files/either",id:"errors_and_files/either",title:"Handling errors with Either",description:"There are quite a few ways to indicate and handle errors in Haskell.",source:"@site/docs/06-errors_and_files/01-either.md",sourceDirName:"06-errors_and_files",slug:"/errors_and_files/either",permalink:"/learn-haskell-blog-generator/errors_and_files/either",draft:!1,editUrl:"https://github.com/jbl428/learn-haskell-blog-generator/tree/book/docs/06-errors_and_files/01-either.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Handling errors and multiple files",permalink:"/learn-haskell-blog-generator/errors_and_files/"},next:{title:"Either with IO?",permalink:"/learn-haskell-blog-generator/errors_and_files/except"}},p={},s=[{value:"Applicative + Traversable",id:"applicative--traversable",level:2},{value:"Multiple errors",id:"multiple-errors",level:2},{value:"Monadic interface",id:"monadic-interface",level:2},{value:"Do notation?",id:"do-notation",level:3},{value:"Summary",id:"summary",level:2}],h={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"handling-errors-with-either"},"Handling errors with Either"),(0,r.kt)("p",null,"There are quite a few ways to indicate and handle errors in Haskell.\nWe are going to look at one solution: using the type\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Either.html"},"Either"),".\nEither is defined like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"data Either a b\n  = Left a\n  | Right b\n")),(0,r.kt)("p",null,"Simply put, a value of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Either a b")," can contain either a value of type ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),",\nor a value of type ",(0,r.kt)("inlineCode",{parentName:"p"},"b"),".\nWe can tell them apart from the constructor used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"Left True :: Either Bool b\nRight 'a' :: Either a Char\n")),(0,r.kt)("p",null,"With this type, we can use the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Left")," constructor to indicate failure with some error value attached,\nand the ",(0,r.kt)("inlineCode",{parentName:"p"},"Right")," constructor with one type to represent success with the\nexpected result."),(0,r.kt)("p",null,"Since ",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," is polymorphic, we can use any two types to represent\nfailure and success. It is often useful to describe the failure modes\nusing an ADT."),(0,r.kt)("p",null,"For example, let's say that we want to parse a ",(0,r.kt)("inlineCode",{parentName:"p"},"Char")," as a decimal digit\nto an ",(0,r.kt)("inlineCode",{parentName:"p"},"Int"),". This operation could fail if the Character is not a digit.\nWe can represent this error as a data type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"data ParseDigitError\n  = NotADigit Char\n  deriving Show\n")),(0,r.kt)("p",null,"And our parsing function can have the type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"parseDigit :: Char -> Either ParseDigitError Int\n")),(0,r.kt)("p",null,"Now when we implement our parsing function we can return ",(0,r.kt)("inlineCode",{parentName:"p"},"Left")," on an error\ndescribing the problem, and ",(0,r.kt)("inlineCode",{parentName:"p"},"Right")," with the parsed value on successful parsing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"parseDigit :: Char -> Either ParseDigitError Int\nparseDigit c =\n  case c of\n    '0' -> Right 0\n    '1' -> Right 1\n    '2' -> Right 2\n    '3' -> Right 3\n    '4' -> Right 4\n    '5' -> Right 5\n    '6' -> Right 6\n    '7' -> Right 7\n    '8' -> Right 8\n    '9' -> Right 9\n    _ -> Left (NotADigit c)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Either a")," is also an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"Functor")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Applicative"),",\nso we have some combinators to work with if we want to combine these\nkind of computations."),(0,r.kt)("p",null,"For example, if we had three characters and we wanted to try and parse\neach of them and then find the maximum between them, we could use the\napplicative interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"max3chars :: Char -> Char -> Char -> Either ParseDigitError Int\nmax3chars x y z =\n  (\\a b c -> max a (max b c))\n    <$> parseDigit x\n    <*> parseDigit y\n    <*> parseDigit z\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Functor")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Applicative")," interfaces of ",(0,r.kt)("inlineCode",{parentName:"p"},"Either a")," allow us to\napply functions to the payload values and ",(0,r.kt)("strong",{parentName:"p"},"delay")," the error handling to a\nlater phase. Semantically, the first Either in order that returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Left"),"\nwill be the return value. We can see how this works in the implementation\nof the applicative instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"instance Applicative (Either e) where\n    pure          = Right\n    Left  e <*> _ = Left e\n    Right f <*> r = fmap f r\n")),(0,r.kt)("p",null,"At some point, someone will actually want to ",(0,r.kt)("strong",{parentName:"p"},"inspect")," the result\nand see if we get an error (with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Left")," constructor) or the expected value\n(with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Right")," constructor) and they can do that by pattern matching the result."),(0,r.kt)("h2",{id:"applicative--traversable"},"Applicative + Traversable"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Applicative")," interface of ",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," is very powerful, and can be combined\nwith another abstraction called\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Data-Traversable.html#g:1"},(0,r.kt)("inlineCode",{parentName:"a"},"Traversable"))," -\nfor data structures that can be traversed from left to right, like a linked list or a binary tree.\nWith these, we can combine an unspecified amount of values such as ",(0,r.kt)("inlineCode",{parentName:"p"},"Either ParseDigitError Int"),",\nas long as they are all in a data structure that implements ",(0,r.kt)("inlineCode",{parentName:"p"},"Traversable"),"."),(0,r.kt)("p",null,"Let's see an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},'ghci> :t "1234567"\n"1234567" :: String\n-- remember, a String is an alias for a list of Char\nghci> :info String\ntype String :: *\ntype String = [Char]\n      -- Defined in \u2018GHC.Base\u2019\n\nghci> :t map parseDigit "1234567"\nmap parseDigit mystring :: [Either ParseDigitError Int]\nghci> map parseDigit "1234567"\n[Right 1,Right 2,Right 3,Right 4,Right 5,Right 6,Right 7]\n\nghci> :t sequenceA\nsequenceA :: (Traversable t, Applicative f) => t (f a) -> f (t a)\n-- Substitute `t` with `[]`, and `f` with `Either Error` for a specialized version\n\nghci> sequenceA (map parseDigit mystring)\nRight [1,2,3,4,5,6,7]\n\nghci> map parseDigit "1a2"\n[Right 1,Left (NotADigit \'a\'),Right 2]\nghci> sequenceA (map parseDigit "1a2")\nLeft (NotADigit \'a\')\n')),(0,r.kt)("p",null,"The pattern of doing ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," and then ",(0,r.kt)("inlineCode",{parentName:"p"},"sequenceA")," is another function called ",(0,r.kt)("inlineCode",{parentName:"p"},"traverse"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},'ghci> :t traverse\ntraverse\n  :: (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)\nghci> traverse parseDigit "1234567"\nRight [1,2,3,4,5,6,7]\nghci> traverse parseDigit "1a2"\nLeft (NotADigit \'a\')\n')),(0,r.kt)("p",null,"We can use ",(0,r.kt)("inlineCode",{parentName:"p"},"traverse")," on any two types where one implements the ",(0,r.kt)("inlineCode",{parentName:"p"},"Applicative"),"\ninterface, like ",(0,r.kt)("inlineCode",{parentName:"p"},"Either a")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"IO"),", and the other implements the ",(0,r.kt)("inlineCode",{parentName:"p"},"Traversable")," interface,\nlike ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," (linked lists) and\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-Map-Strict.html#t:Map"},(0,r.kt)("inlineCode",{parentName:"a"},"Map k")),"\n(also known as a dictionary in other languages - a mapping from keys to values).\nFor example using ",(0,r.kt)("inlineCode",{parentName:"p"},"IO")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Map"),". Note that we can construct a ",(0,r.kt)("inlineCode",{parentName:"p"},"Map")," data structure\nfrom a list of tuples using the\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-Map-Strict.html#v:fromList"},(0,r.kt)("inlineCode",{parentName:"a"},"fromList")),"\nfunction - the first value in the tuple is the key, and the second is the type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},'ghci> import qualified Data.Map as M -- from the containers package\n\nghci> file1 = ("output/file1.html", "input/file1.txt")\nghci> file2 = ("output/file2.html", "input/file2.txt")\nghci> file3 = ("output/file3.html", "input/file3.txt")\nghci> files = M.fromList [file1, file2, file3]\nghci> :t files :: M.Map FilePath FilePath -- FilePath is an alias of String\nfiles :: M.Map FilePath FilePath :: M.Map FilePath FilePath\n\nghci> readFiles = traverse readFile\nghci> :t readFiles\nreadFiles :: Traversable t => t FilePath -> IO (t String)\n\nghci> readFiles files\nfromList [("output/file1.html","I\'m the content of file1.txt\\n"),("output/file2.html","I\'m the content of file2.txt\\n"),("output/file3.html","I\'m the content of file3.txt\\n")]\nghci> :t readFiles files\nreadFiles files :: IO (Map String String)\n')),(0,r.kt)("p",null,"Above, we created a function ",(0,r.kt)("inlineCode",{parentName:"p"},"readFiles")," that will take a mapping from ",(0,r.kt)("em",{parentName:"p"},"output file path"),"\nto ",(0,r.kt)("em",{parentName:"p"},"input file path")," and returns an IO operation that when run will read the input files\nand replace their contents right there in the map! Surely this will be useful later."),(0,r.kt)("h2",{id:"multiple-errors"},"Multiple errors"),(0,r.kt)("p",null,"Note, since ",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," has the kind ",(0,r.kt)("inlineCode",{parentName:"p"},"* -> * -> *")," (it takes two type\nparameters) ",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," cannot be an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"Functor")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Applicative"),":\ninstances of these type classes must have the\nkind ",(0,r.kt)("inlineCode",{parentName:"p"},"* -> *"),".\nRemember that when we look at a type class function signature like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"fmap :: Functor f => (a -> b) -> f a -> f b\n")),(0,r.kt)("p",null,"And we want to implement it for a specific type (in place of the ",(0,r.kt)("inlineCode",{parentName:"p"},"f"),"),\nwe need to be able to ",(0,r.kt)("em",{parentName:"p"},"substitute")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," with the target type. If we'd try\nto do it with ",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," we would get:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"fmap :: (a -> b) -> Either a -> Either b\n")),(0,r.kt)("p",null,"And neither ",(0,r.kt)("inlineCode",{parentName:"p"},"Either a")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Either b")," are ",(0,r.kt)("em",{parentName:"p"},"saturated"),", so this won't type check.\nFor the same reason if we'll try to substitute ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," with, say, ",(0,r.kt)("inlineCode",{parentName:"p"},"Int"),", we'll get:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"fmap :: (a -> b) -> Int a -> Int b\n")),(0,r.kt)("p",null,"Which also doesn't make sense."),(0,r.kt)("p",null,"While we can't use ",(0,r.kt)("inlineCode",{parentName:"p"},"Either"),", we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Either e"),", which has the kind\n",(0,r.kt)("inlineCode",{parentName:"p"},"* -> *"),". Now let's try substituting ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"Either e")," in this signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"liftA2 :: Applicative => (a -> b -> c) -> f a -> f b -> f c\n")),(0,r.kt)("p",null,"And we'll get:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"liftA2 :: (a -> b -> c) -> Either e a -> Either e b -> Either e c\n")),(0,r.kt)("p",null,"What this teaches us is that we can only use the applicative interface to\ncombine two ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"Either"),"s with the same type for the ",(0,r.kt)("inlineCode",{parentName:"em"},"Left")," constructor"),"."),(0,r.kt)("p",null,"So what can we do if we have two functions that can return different errors?\nThere are a few approaches, the most prominent ones are:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Make them return the same error type. Write an ADT that holds all possible\nerror descriptions. This can work in some cases but isn't always ideal.\nFor example a user calling ",(0,r.kt)("inlineCode",{parentName:"li"},"parseDigit")," shouldn't be forced to\nhandle a possible case that the input might be an empty string"),(0,r.kt)("li",{parentName:"ol"},"Use a specialized error type for each type, and when they are composed together,\nmap the error type of each function to a more general error type. This can\nbe done with the function\n",(0,r.kt)("a",{parentName:"li",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Data-Bifunctor.html#v:first"},(0,r.kt)("inlineCode",{parentName:"a"},"first")),"\nfrom the ",(0,r.kt)("inlineCode",{parentName:"li"},"Bifunctor")," type class")),(0,r.kt)("h2",{id:"monadic-interface"},"Monadic interface"),(0,r.kt)("p",null,"The applicative interface allows us to lift a function to work on multiple\n",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," values (or other applicative functor instances such as ",(0,r.kt)("inlineCode",{parentName:"p"},"IO")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Parser"),").\nBut more often than not, we'd like to use a value from one computation\nthat might return an error in another computation that might return an error."),(0,r.kt)("p",null,"For example, a compiler such has GHC operates in stages, such as lexical analysis,\nparsing, type-checking, and so on. Each stage depends on the output of the stage\nbefore it, and each stage might fail. We can write the types for these functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"tokenize :: String -> Either Error [Token]\n\nparse :: [Token] -> Either Error AST\n\ntypecheck :: AST -> Either Error TypedAST\n")),(0,r.kt)("p",null,"We want to compose these functions so that they work in a chain. The output of ",(0,r.kt)("inlineCode",{parentName:"p"},"tokenize"),"\ngoes to ",(0,r.kt)("inlineCode",{parentName:"p"},"parse"),", and the output of ",(0,r.kt)("inlineCode",{parentName:"p"},"parse")," goes to ",(0,r.kt)("inlineCode",{parentName:"p"},"typecheck"),"."),(0,r.kt)("p",null,"We know that we can lift a function over an ",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," (and other functors),\nwe can also lift a function that returns an ",(0,r.kt)("inlineCode",{parentName:"p"},"Either"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"-- reminder the type of fmap\nfmap :: Functor f => (a -> b) -> f a -> f b\n-- specialized for `Either Error`\nfmap :: (a -> b) -> Either Error a -> Either Error b\n\n-- here, `a` is [Token] and `b` is `Either Error AST`:\n\n> fmap parse (tokenize string) :: Either Error (Either Error AST)\n")),(0,r.kt)("p",null,"While this code compiles, it isn't great, because we are building\nlayers of ",(0,r.kt)("inlineCode",{parentName:"p"},"Either Error")," and we can't use this trick again with\n",(0,r.kt)("inlineCode",{parentName:"p"},"typecheck"),"! ",(0,r.kt)("inlineCode",{parentName:"p"},"typecheck")," expects an ",(0,r.kt)("inlineCode",{parentName:"p"},"AST"),", but if we try to fmap it\non ",(0,r.kt)("inlineCode",{parentName:"p"},"fmap parse (tokenize string)"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"Either Error AST"),"\ninstead."),(0,r.kt)("p",null,"What we would really like is to flatten this structure instead of nesting it.\nIf we look at the kind of values ",(0,r.kt)("inlineCode",{parentName:"p"},"Either Error (Either Error AST)")," could have,\nit looks something like this:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Left <error>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Right (Left error)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Right (Right <ast>)"))),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exercise"),": What if we just used pattern matching for this instead? How would this look like?"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"case tokenize string of\n  Left err ->\n    Left err\n  Right tokens ->\n    case parse tokens of\n      Left err ->\n        Left err\n      Right ast ->\n        typecheck ast\n")),(0,r.kt)("p",null,"If we run into an error in a stage, we return that error and stop. If we succeed, we\nuse the value on the next stage.")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Flattening this structure for ",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," is very similar to that last part - the body\nof the ",(0,r.kt)("inlineCode",{parentName:"p"},"Right tokens")," case:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"flatten :: Either e (Either e a) -> Either e a\nflatten e =\n  case e of\n    Left l -> Left l\n    Right x -> x\n")),(0,r.kt)("p",null,"Because we have this function, we can now use it on the output of\n",(0,r.kt)("inlineCode",{parentName:"p"},"fmap parse (tokenize string) :: Either Error (Either Error AST)"),"\nfrom before:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"> flatten (fmap parse (tokenize string)) :: Either Error AST\n")),(0,r.kt)("p",null,"And now we can use this function again to compose with ",(0,r.kt)("inlineCode",{parentName:"p"},"typecheck"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"> flatten (fmap typecheck (flatten (fmap parse (tokenize string)))) :: Either Error TypedAST\n")),(0,r.kt)("p",null,"This ",(0,r.kt)("inlineCode",{parentName:"p"},"flatten")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"fmap")," combination looks like a recurring pattern which\nwe can combine into a function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"flatMap :: (a -> Either e b) -> Either a -> Either b\nflatMap func val = flatten (fmap func val)\n")),(0,r.kt)("p",null,"And now we can write the code this way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"> flatMap typecheck (flatMap parse (tokenize string)) :: Either Error TypedAST\n\n-- Or using backticks syntax to convert the function to infix form:\n> typecheck `flatMap` parse `flatMap` tokenize string\n\n-- Or create a custom infix operator: (=<<) = flatMap\n> typeCheck =<< parse =<< tokenize string\n")),(0,r.kt)("p",null,"This function, ",(0,r.kt)("inlineCode",{parentName:"p"},"flatten")," (and ",(0,r.kt)("inlineCode",{parentName:"p"},"flatMap")," as well), have different names in Haskell.\nThey are called\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Control-Monad.html#v:join"},(0,r.kt)("inlineCode",{parentName:"a"},"join")),"\nand ",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Control-Monad.html#v:-61--60--60-"},(0,r.kt)("inlineCode",{parentName:"a"},"=<<")),'\n(pronounced "reverse bind"),\nand they are the essence of another incredibly useful abstraction in Haskell.'),(0,r.kt)("p",null,"If we have a type that can implement:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Functor")," interface, specifically the ",(0,r.kt)("inlineCode",{parentName:"li"},"fmap")," function"),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Applicative")," interface, most importantly the ",(0,r.kt)("inlineCode",{parentName:"li"},"pure")," function"),(0,r.kt)("li",{parentName:"ol"},"This ",(0,r.kt)("inlineCode",{parentName:"li"},"join")," function")),(0,r.kt)("p",null,"They can implement an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Monad")," type class."),(0,r.kt)("p",null,'With functors, we were able to "lift" a function to work over the type implementing the functor type class:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"fmap :: (a -> b) -> f a -> f b\n")),(0,r.kt)("p",null,'With applicative functors we were able to "lift" a function of multiple arguments\nover multiple values of a type implementing the applicative functor type class,\nand also lift a value into that type:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"pure :: a -> f a\n\nliftA2 :: (a -> b -> c) -> f a -> f b -> f c\n")),(0,r.kt)("p",null,'With monads we can now flatten (or, "join" in Haskell terminology) types that implement\nthe ',(0,r.kt)("inlineCode",{parentName:"p"},"Monad")," interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},'join :: m (m a) -> m a\n\n-- this is =<< with the arguments reversed, pronounced "bind"\n(>>=) :: m a -> (a -> m b) -> m b\n')),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},">>=")," we can write our compilation pipeline from before in a left-to-right\nmanner, which seems to be more popular for monads:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"> tokenize string >>= parse >>= typecheck\n")),(0,r.kt)("p",null,"We have already met this function before when we talked about ",(0,r.kt)("inlineCode",{parentName:"p"},"IO"),". Yes,\n",(0,r.kt)("inlineCode",{parentName:"p"},"IO")," also implements the ",(0,r.kt)("inlineCode",{parentName:"p"},"Monad")," interface. The monadic interface for ",(0,r.kt)("inlineCode",{parentName:"p"},"IO"),"\nhelped us with creating a proper ordering of effects."),(0,r.kt)("p",null,"The essence of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Monad")," interface is the ",(0,r.kt)("inlineCode",{parentName:"p"},"join"),"/",(0,r.kt)("inlineCode",{parentName:"p"},">>=")," functions, and as we've seen\nwe can implement ",(0,r.kt)("inlineCode",{parentName:"p"},">>=")," in terms of ",(0,r.kt)("inlineCode",{parentName:"p"},"join"),", we can also implement ",(0,r.kt)("inlineCode",{parentName:"p"},"join")," in terms\nof ",(0,r.kt)("inlineCode",{parentName:"p"},">>=")," (try it!)."),(0,r.kt)("p",null,"The monadic interface can mean very different things for different types. For ",(0,r.kt)("inlineCode",{parentName:"p"},"IO")," this\nis ordering of effects, for ",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," it is early cutoff,\nfor ",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/logict-0.7.1.0"},(0,r.kt)("inlineCode",{parentName:"a"},"Logic"))," this means backtracking computation, etc."),(0,r.kt)("p",null,"Again, don't worry about analogies and metaphors, focus on the API and the\n",(0,r.kt)("a",{parentName:"p",href:"https://wiki.haskell.org/Monad_laws"},"laws"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Hey, did you check the monad laws? left identity, right identity and associativity? We've already\ndiscussed a type class with exactly these laws - the ",(0,r.kt)("inlineCode",{parentName:"p"},"Monoid")," type class. Maybe this is related\nto the famous quote about monads being just monoids in something something...")),(0,r.kt)("h3",{id:"do-notation"},"Do notation?"),(0,r.kt)("p",null,"Remember the ",(0,r.kt)("a",{parentName:"p",href:"/learn-haskell-blog-generator/glue/io#do-notation"},"do notation"),"? Turns out it works for any type that is\nan instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"Monad"),". How cool is that? Instead of writing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"pipeline :: String -> Either Error TypedAST\npipeline string =\n  tokenize string >>= \\tokens ->\n    parse tokens >>= \\ast ->\n      typecheck ast\n")),(0,r.kt)("p",null,"We can write:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"pipeline :: String -> Either Error TypedAST\npipeline string = do\n  tokens <- tokenize string\n  ast <- parse tokens\n  typecheck ast\n")),(0,r.kt)("p",null,"And it will work! Still, in this particular case ",(0,r.kt)("inlineCode",{parentName:"p"},"tokenize string >>= parse >>= typecheck"),"\nis so concise it can only be beaten by using\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Control-Monad.html#v:-62--61--62-"},">=>"),"\nor\n",(0,r.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/base-4.16.4.0/docs/Control-Monad.html#v:-60--61--60-"},"<=<"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"(>=>) :: Monad m => (a -> m b) -> (b -> m c) -> a -> m c\n(<=<) :: Monad m => (b -> m c) -> (a -> m b) -> a -> m c\n\n-- compare with function composition:\n(.) ::              (b ->   c) -> (a ->   b) -> a ->   c\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"pipeline  = tokenize >=> parse >=> typecheck\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-haskell"},"pipeline = typecheck <=< parse <=< tokenize\n")),(0,r.kt)("p",null,"Haskell's ability to create very concise code using abstractions is\ngreat once one is familiar with the abstractions. Knowing the monad abstraction,\nwe are now already familiar with the core composition API of many libraries - for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://hackage.haskell.org/package/stm"},"Concurrent"),"\nand ",(0,r.kt)("a",{parentName:"li",href:"https://hackage.haskell.org/package/async"},"asynchronous programming")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gilmi.me/blog/post/2020/12/05/scotty-bulletin-board"},"Web programming")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://hspec.github.io/"},"Testing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://hackage.haskell.org/package/mtl-2.3.1/docs/Control-Monad-State-Lazy.html#g:2"},"Emulating stateful computation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://hackage.haskell.org/package/mtl-2.3.1/docs/Control-Monad-Reader.html#g:2"},"sharing environment between computations")),(0,r.kt)("li",{parentName:"ul"},"and many more.")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," for error handling is useful for two reasons:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"We encode possible errors using types, and we ",(0,r.kt)("strong",{parentName:"li"},"force users to acknowledge and handle")," them, thus\nmaking our code more resilient to crashes and bad behaviours"),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Functor"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Applicative"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"Monad")," interfaces provide us with mechanisms for\n",(0,r.kt)("strong",{parentName:"li"},"composing")," functions that might fail (almost) effortlessly - reducing boilerplate while\nmaintaining strong guarantees about our code, and delaying the need to handle errors until\nit is appropriate")))}m.isMDXComponent=!0}}]);